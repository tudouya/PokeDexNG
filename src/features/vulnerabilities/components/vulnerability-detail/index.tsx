'use client';

import { useState, memo, useMemo } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Button } from '@/components/ui/button';
import {
  ArrowLeft,
  AlertTriangle,
  Edit,
  Share2,
  FileText,
  Settings
} from 'lucide-react';
import { useVulnerabilityDetail } from '../../hooks/useVulnerabilityDetail';
import { OverviewSection } from './overview-section';
import { QuickInfoSection } from './quick-info-section';
import { DetailTabs } from './detail-tabs';
import { SidePanel } from './side-panel';
import { ViewSwitcher } from './view-switcher';
import { VulnerabilityDetailSkeleton } from './skeleton';
import { CommentSection } from '../comments/comment-section';

export type ViewMode = 'quick' | 'standard' | 'full';

interface VulnerabilityDetailProps {
  id: number;
}

function VulnerabilityDetailComponent({ id }: VulnerabilityDetailProps) {
  const router = useRouter();
  const [viewMode, setViewMode] = useState<ViewMode>('full');
  const [isEditing, setIsEditing] = useState(false);

  const {
    data: vulnerability,
    loading,
    error,
    refetch
  } = useVulnerabilityDetail(id);

  // 缓存重复使用的回调函数
  const handleRefetch = useMemo(() => refetch, [refetch]);

  // 缓存昂贵的计算结果
  const targetDisplayName = useMemo(() => {
    if (!vulnerability) return '';
    return vulnerability.target.projectName
      ? `${vulnerability.target.projectName} - ${vulnerability.target.name}`
      : vulnerability.target.name;
  }, [vulnerability?.target.projectName, vulnerability?.target.name]);

  if (error) {
    return (
      <Alert variant='destructive'>
        <AlertTriangle className='h-4 w-4' />
        <AlertDescription>
          加载漏洞详情失败: {error}
          <Button
            variant='outline'
            size='sm'
            className='ml-2'
            onClick={() => refetch()}
          >
            重试
          </Button>
        </AlertDescription>
      </Alert>
    );
  }

  if (loading || !vulnerability) {
    return <VulnerabilityDetailSkeleton />;
  }

  return (
    <div className='space-y-6'>
      {/* 页面标题区 */}
      <div className='flex flex-col gap-4 md:flex-row md:items-start md:justify-between'>
        <div className='space-y-1'>
          <div className='text-muted-foreground flex items-center gap-2 text-sm'>
            <Link
              href='/dashboard/vulnerabilities'
              className='hover:text-foreground flex items-center gap-1 transition-colors'
            >
              <ArrowLeft className='h-4 w-4' />
              返回漏洞列表
            </Link>
            <span>/</span>
            <span>漏洞 #{vulnerability.id}</span>
          </div>

          <h1 className='line-clamp-2 text-2xl font-bold tracking-tight'>
            {vulnerability.title}
          </h1>

          <p className='text-muted-foreground'>{targetDisplayName}</p>
        </div>

        {/* 操作按钮组 */}
        <div className='relative flex flex-wrap items-center gap-2'>
          <ViewSwitcher value={viewMode} onChange={setViewMode} />

          <Button
            variant='outline'
            size='sm'
            onClick={() => setIsEditing(!isEditing)}
            className='gap-1'
          >
            <Edit className='h-4 w-4' />
            编辑
          </Button>

          <Button variant='outline' size='sm' className='gap-1'>
            <Share2 className='h-4 w-4' />
            分享
          </Button>

          <Button variant='outline' size='sm' className='gap-1' disabled>
            <FileText className='h-4 w-4' />
            导出
          </Button>
        </div>
      </div>

      {/* 主要内容区 */}
      <div className='grid grid-cols-1 gap-6 xl:grid-cols-4'>
        {/* 左侧内容区 */}
        <div className='min-w-0 space-y-6 xl:col-span-3'>
          {/* 第一层：固定概览区 */}
          <OverviewSection
            vulnerability={vulnerability}
            isEditing={isEditing}
          />

          {/* 第二层：快速信息区 */}
          {(viewMode === 'standard' || viewMode === 'full') && (
            <QuickInfoSection
              vulnerability={vulnerability}
              isEditing={isEditing}
            />
          )}

          {/* 第三层：深度细节区 */}
          {viewMode === 'full' && (
            <DetailTabs vulnerability={vulnerability} isEditing={isEditing} />
          )}

          {/* 第四层：评论讨论区 */}
          {(viewMode === 'standard' || viewMode === 'full') && (
            <div data-comments-section>
              <CommentSection vulnerabilityId={vulnerability.id} />
            </div>
          )}
        </div>

        {/* 右侧信息面板 */}
        <div className='xl:sticky xl:top-6 xl:col-span-1 xl:h-fit'>
          <SidePanel
            vulnerability={vulnerability}
            onStatusChange={handleRefetch}
            onAssignmentChange={handleRefetch}
            onScrollToComments={() => {
              const commentsSection = document.querySelector(
                '[data-comments-section]'
              );
              commentsSection?.scrollIntoView({ behavior: 'smooth' });
            }}
          />
        </div>
      </div>
    </div>
  );
}

// 使用 memo 优化性能，避免不必要的重渲染
export const VulnerabilityDetail = memo(VulnerabilityDetailComponent);
