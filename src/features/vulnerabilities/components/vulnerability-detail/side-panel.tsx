'use client';

import { useState } from 'react';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue
} from '@/components/ui/select';
import {
  Info,
  UserCheck,
  Calendar,
  AlertCircle,
  CheckCircle2,
  Clock,
  XCircle,
  PlayCircle,
  PauseCircle,
  RotateCcw,
  Shield,
  Target,
  User
} from 'lucide-react';
import { VulnerabilityDTO, VulnerabilityStatus } from '../../types';
import { CommentQuickPreview } from '../comments/comment-quick-preview';
import {
  VULNERABILITY_STATUS_OPTIONS,
  getColorByValue
} from '../vulnerability-tables/options';
import { format } from 'date-fns';
import { zhCN } from 'date-fns/locale';

interface SidePanelProps {
  vulnerability: VulnerabilityDTO;
  onStatusChange?: () => void;
  onAssignmentChange?: () => void;
  onScrollToComments?: () => void;
}

// 状态图标映射
const statusIcons = {
  OPEN: AlertCircle,
  CONFIRMED: AlertCircle,
  IN_PROGRESS: Clock,
  FIXED: CheckCircle2,
  VERIFIED: CheckCircle2,
  REOPEN: RotateCcw,
  WONT_FIX: XCircle,
  FALSE_POSITIVE: XCircle,
  DUPLICATE: XCircle,
  ACCEPTED_RISK: Shield
};

// 快速操作按钮配置
const quickActions = [
  {
    key: 'confirm',
    label: '确认漏洞',
    icon: CheckCircle2,
    variant: 'default' as const,
    allowedStatuses: ['OPEN']
  },
  {
    key: 'start',
    label: '开始处理',
    icon: PlayCircle,
    variant: 'default' as const,
    allowedStatuses: ['CONFIRMED']
  },
  {
    key: 'fix',
    label: '标记修复',
    icon: CheckCircle2,
    variant: 'default' as const,
    allowedStatuses: ['IN_PROGRESS']
  },
  {
    key: 'verify',
    label: '验证修复',
    icon: Shield,
    variant: 'default' as const,
    allowedStatuses: ['FIXED']
  },
  {
    key: 'reopen',
    label: '重新打开',
    icon: RotateCcw,
    variant: 'outline' as const,
    allowedStatuses: ['FIXED', 'VERIFIED', 'WONT_FIX', 'FALSE_POSITIVE']
  }
];

export function SidePanel({
  vulnerability,
  onStatusChange,
  onAssignmentChange,
  onScrollToComments
}: SidePanelProps) {
  const [isUpdatingStatus, setIsUpdatingStatus] = useState(false);
  const [isAssigning, setIsAssigning] = useState(false);

  const statusOption = VULNERABILITY_STATUS_OPTIONS.find(
    (opt) => opt.value === vulnerability.status
  );
  const statusColor = getColorByValue(
    VULNERABILITY_STATUS_OPTIONS,
    vulnerability.status
  );
  const StatusIcon = statusIcons[vulnerability.status];

  // 获取当前状态可用的快速操作
  const availableActions = quickActions.filter((action) =>
    action.allowedStatuses.includes(vulnerability.status)
  );

  const handleStatusChange = async (newStatus: VulnerabilityStatus) => {
    try {
      setIsUpdatingStatus(true);
      const response = await fetch(
        `/api/vulnerabilities/${vulnerability.id}/status`,
        {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ status: newStatus })
        }
      );

      if (response.ok) {
        onStatusChange?.();
      }
    } catch (error) {
      console.error('Status update failed:', error);
    } finally {
      setIsUpdatingStatus(false);
    }
  };

  const handleQuickAction = async (actionKey: string) => {
    const statusMapping: Record<string, VulnerabilityStatus> = {
      confirm: 'CONFIRMED',
      start: 'IN_PROGRESS',
      fix: 'FIXED',
      verify: 'VERIFIED',
      reopen: 'OPEN'
    };

    const newStatus = statusMapping[actionKey];
    if (newStatus) {
      await handleStatusChange(newStatus);
    }
  };

  return (
    <div className='space-y-4'>
      {/* 快速信息卡片 */}
      <Card>
        <CardHeader className='pb-3'>
          <CardTitle className='flex items-center gap-2 text-lg'>
            <Info className='h-4 w-4' />
            快速信息
          </CardTitle>
        </CardHeader>
        <CardContent className='space-y-4'>
          {/* 当前状态 */}
          <div className='space-y-2'>
            <div className='text-muted-foreground text-sm font-medium'>
              当前状态
            </div>
            <Badge
              className='gap-1 px-3 py-1 text-xs'
              style={{ borderColor: statusColor, color: statusColor }}
              variant='outline'
            >
              <StatusIcon className='h-3 w-3' />
              {statusOption?.label}
            </Badge>
          </div>

          <Separator />

          {/* 严重程度 */}
          <div className='space-y-2'>
            <div className='text-muted-foreground text-sm font-medium'>
              严重程度
            </div>
            <div className='flex items-center gap-2'>
              <Badge
                className='px-3 py-1 text-xs font-medium'
                style={{
                  backgroundColor: getColorByValue(
                    [
                      { value: 'CRITICAL', color: '#dc2626' },
                      { value: 'HIGH', color: '#ea580c' },
                      { value: 'MEDIUM', color: '#d97706' },
                      { value: 'LOW', color: '#65a30d' },
                      { value: 'INFO', color: '#0891b2' }
                    ],
                    vulnerability.severity
                  ),
                  color: 'white'
                }}
              >
                {vulnerability.severity === 'CRITICAL'
                  ? '严重'
                  : vulnerability.severity === 'HIGH'
                    ? '高'
                    : vulnerability.severity === 'MEDIUM'
                      ? '中等'
                      : vulnerability.severity === 'LOW'
                        ? '较低'
                        : '信息'}
              </Badge>
              {vulnerability.cvssScore && (
                <span className='text-muted-foreground text-sm'>
                  CVSS {vulnerability.cvssScore.toFixed(1)}
                </span>
              )}
            </div>
          </div>

          <Separator />

          {/* 目标信息 */}
          <div className='space-y-2'>
            <div className='text-muted-foreground text-sm font-medium'>
              测试目标
            </div>
            <div className='space-y-1'>
              <div className='flex items-center gap-2'>
                <Target className='text-muted-foreground h-3 w-3' />
                <span className='text-sm font-medium'>
                  {vulnerability.target.name}
                </span>
              </div>
              {vulnerability.target.projectName && (
                <div className='text-muted-foreground pl-5 text-xs'>
                  项目: {vulnerability.target.projectName}
                </div>
              )}
              {vulnerability.target.url && (
                <div className='text-muted-foreground pl-5 font-mono text-xs'>
                  {vulnerability.target.url}
                </div>
              )}
            </div>
          </div>

          <Separator />

          {/* 关键时间 */}
          <div className='space-y-2'>
            <div className='text-muted-foreground flex items-center gap-2 text-sm font-medium'>
              <Calendar className='h-3 w-3' />
              关键时间
            </div>
            <div className='space-y-1 text-xs'>
              <div className='flex justify-between'>
                <span className='text-muted-foreground'>发现时间</span>
                <span>
                  {format(new Date(vulnerability.foundDate), 'MM-dd HH:mm', {
                    locale: zhCN
                  })}
                </span>
              </div>
              {vulnerability.confirmedAt && (
                <div className='flex justify-between'>
                  <span className='text-muted-foreground'>确认时间</span>
                  <span>
                    {format(
                      new Date(vulnerability.confirmedAt),
                      'MM-dd HH:mm',
                      { locale: zhCN }
                    )}
                  </span>
                </div>
              )}
              {vulnerability.fixedAt && (
                <div className='flex justify-between'>
                  <span className='text-muted-foreground'>修复时间</span>
                  <span>
                    {format(new Date(vulnerability.fixedAt), 'MM-dd HH:mm', {
                      locale: zhCN
                    })}
                  </span>
                </div>
              )}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* 状态控制卡片 */}
      <Card>
        <CardHeader className='pb-3'>
          <CardTitle className='flex items-center gap-2 text-lg'>
            <UserCheck className='h-4 w-4' />
            状态控制
          </CardTitle>
          <CardDescription>管理漏洞的处理状态和责任人</CardDescription>
        </CardHeader>
        <CardContent className='space-y-4'>
          {/* 状态选择器 */}
          <div className='space-y-2'>
            <div className='text-sm font-medium'>更改状态</div>
            <Select
              value={vulnerability.status}
              onValueChange={handleStatusChange}
              disabled={isUpdatingStatus}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {VULNERABILITY_STATUS_OPTIONS.map((option) => {
                  const Icon = statusIcons[option.value as VulnerabilityStatus];
                  return (
                    <SelectItem key={option.value} value={option.value}>
                      <div className='flex items-center gap-2'>
                        <Icon className='h-3 w-3' />
                        <span>{option.label}</span>
                      </div>
                    </SelectItem>
                  );
                })}
              </SelectContent>
            </Select>
          </div>

          {/* 快速操作按钮 */}
          {availableActions.length > 0 && (
            <>
              <Separator />
              <div className='space-y-2'>
                <div className='text-sm font-medium'>快速操作</div>
                <div className='space-y-2'>
                  {availableActions.map((action) => {
                    const Icon = action.icon;
                    return (
                      <Button
                        key={action.key}
                        variant={action.variant}
                        size='sm'
                        className='w-full gap-2'
                        onClick={() => handleQuickAction(action.key)}
                        disabled={isUpdatingStatus}
                      >
                        <Icon className='h-4 w-4' />
                        {action.label}
                      </Button>
                    );
                  })}
                </div>
              </div>
            </>
          )}

          <Separator />

          {/* 责任人信息 */}
          <div className='space-y-3'>
            <div className='text-sm font-medium'>责任人信息</div>

            <div className='space-y-2'>
              {/* 发现人员 */}
              <div className='flex items-center justify-between text-xs'>
                <span className='text-muted-foreground'>发现人员</span>
                <div className='flex items-center gap-1'>
                  <User className='h-3 w-3' />
                  <span>
                    {vulnerability.foundByUser
                      ? vulnerability.foundByUser.name ||
                        vulnerability.foundByUser.email
                      : '系统记录'}
                  </span>
                </div>
              </div>

              {/* 确认人员 */}
              {vulnerability.confirmedByUser && (
                <div className='flex items-center justify-between text-xs'>
                  <span className='text-muted-foreground'>确认人员</span>
                  <div className='flex items-center gap-1'>
                    <User className='h-3 w-3' />
                    <span>
                      {vulnerability.confirmedByUser.name ||
                        vulnerability.confirmedByUser.email}
                    </span>
                  </div>
                </div>
              )}

              {/* 验证人员 */}
              {vulnerability.verifiedByUser && (
                <div className='flex items-center justify-between text-xs'>
                  <span className='text-muted-foreground'>验证人员</span>
                  <div className='flex items-center gap-1'>
                    <User className='h-3 w-3' />
                    <span>
                      {vulnerability.verifiedByUser.name ||
                        vulnerability.verifiedByUser.email}
                    </span>
                  </div>
                </div>
              )}
            </div>

            {/* 分配新责任人的按钮 */}
            <Button
              variant='outline'
              size='sm'
              className='w-full'
              onClick={() => setIsAssigning(true)}
              disabled={isAssigning}
            >
              <UserCheck className='mr-2 h-4 w-4' />
              分配责任人
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* 相关链接和操作 */}
      <Card>
        <CardHeader className='pb-3'>
          <CardTitle className='text-lg'>相关操作</CardTitle>
        </CardHeader>
        <CardContent className='space-y-2'>
          <Button variant='outline' size='sm' className='w-full' disabled>
            查看相关漏洞
          </Button>
          <Button variant='outline' size='sm' className='w-full' disabled>
            生成漏洞报告
          </Button>
          <Button variant='outline' size='sm' className='w-full' disabled>
            导出详细信息
          </Button>
          <Separator />
          <Button variant='destructive' size='sm' className='w-full' disabled>
            删除漏洞记录
          </Button>
        </CardContent>
      </Card>

      {/* 评论快速预览 */}
      <CommentQuickPreview
        vulnerabilityId={vulnerability.id}
        onScrollToComments={onScrollToComments}
      />
    </div>
  );
}
