'use client';

import { UseFormReturn } from 'react-hook-form';
import {
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage
} from '@/components/ui/form';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue
} from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { RichTextEditor } from '@/components/ui/rich-text-editor';
import { Badge } from '@/components/ui/badge';
import { DatePicker } from '@/components/ui/date-picker';
import { Separator } from '@/components/ui/separator';
import {
  Target as TargetIcon,
  Calendar,
  AlertTriangle,
  Settings,
  Sparkles
} from 'lucide-react';
import { CreateVulnerabilityInput } from '../../validations/vulnerability.validation';
import {
  VULNERABILITY_SEVERITY_OPTIONS,
  VULNERABILITY_STATUS_OPTIONS
} from '../vulnerability-tables/options';
import {
  useTargetOptions,
  useCategoryOptions
} from '../../hooks/useVulnerabilities';

interface BasicInfoTabProps {
  form: UseFormReturn<CreateVulnerabilityInput>;
}

export function BasicInfoTab({ form }: BasicInfoTabProps) {
  const { data: targets, loading: targetsLoading } = useTargetOptions();
  const { data: categories, loading: categoriesLoading } = useCategoryOptions();

  return (
    <div className='space-y-8'>
      {/* 核心信息区块 */}
      <div className='space-y-6'>
        <div>
          <h3 className='flex items-center gap-2 text-lg font-medium'>
            <AlertTriangle className='h-5 w-5' />
            核心信息
          </h3>
          <p className='text-muted-foreground text-sm'>
            漏洞的基本识别信息，带 * 为必填项
          </p>
        </div>
        <Separator />

        <div className='grid grid-cols-1 gap-6 md:grid-cols-2'>
          {/* 漏洞标题 */}
          <FormField
            control={form.control}
            name='title'
            render={({ field }) => (
              <FormItem className='md:col-span-2'>
                <FormLabel>漏洞标题 *</FormLabel>
                <FormControl>
                  <Input
                    placeholder='请输入简洁明确的漏洞标题，如：后台用户管理存在SQL注入漏洞'
                    {...field}
                  />
                </FormControl>
                <FormDescription>
                  建议格式：位置 + 漏洞类型，如"登录接口存在SQL注入"
                </FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />

          {/* 严重程度 */}
          <FormField
            control={form.control}
            name='severity'
            render={({ field }) => (
              <FormItem>
                <FormLabel>严重程度 *</FormLabel>
                <Select
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder='选择漏洞严重程度' />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {VULNERABILITY_SEVERITY_OPTIONS.map((option) => (
                      <SelectItem key={option.value} value={option.value}>
                        <div className='flex items-center gap-2'>
                          <div
                            className='h-2 w-2 rounded-full'
                            style={{ backgroundColor: option.color }}
                          />
                          {option.label}
                        </div>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <FormDescription>根据CVSS评分或影响程度选择</FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />

          {/* 漏洞状态 */}
          <FormField
            control={form.control}
            name='status'
            render={({ field }) => (
              <FormItem>
                <FormLabel>漏洞状态</FormLabel>
                <Select
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder='选择漏洞状态' />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {VULNERABILITY_STATUS_OPTIONS.map((option) => (
                      <SelectItem key={option.value} value={option.value}>
                        <div className='flex items-center gap-2'>
                          <div
                            className='h-2 w-2 rounded-full'
                            style={{ backgroundColor: option.color }}
                          />
                          {option.label}
                        </div>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <FormDescription>新发现漏洞通常为"开放"状态</FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>

        {/* 漏洞描述 */}
        <FormField
          control={form.control}
          name='description'
          render={({ field }) => (
            <FormItem>
              <FormLabel>漏洞描述 *</FormLabel>
              <FormControl>
                <RichTextEditor
                  content={field.value}
                  placeholder='详细描述漏洞的具体表现、触发条件、影响范围等信息...'
                  onChange={field.onChange}
                  minHeight='200px'
                  className='border-input'
                />
              </FormControl>
              <FormDescription>
                支持富文本格式，可插入图片、代码块等。包含漏洞的表现形式、触发条件、潜在影响等详细信息
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
      </div>

      {/* 关联信息区块 */}
      <div className='space-y-6'>
        <div>
          <h3 className='flex items-center gap-2 text-lg font-medium'>
            <TargetIcon className='h-5 w-5' />
            关联信息
          </h3>
          <p className='text-muted-foreground text-sm'>
            将漏洞关联到具体的目标和分类
          </p>
        </div>
        <Separator />

        <div className='grid grid-cols-1 gap-6 md:grid-cols-2'>
          {/* 目标选择 */}
          <FormField
            control={form.control}
            name='targetId'
            render={({ field }) => (
              <FormItem>
                <FormLabel>测试目标 *</FormLabel>
                <Select
                  onValueChange={(value) => field.onChange(parseInt(value))}
                  value={field.value?.toString() || ''}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue
                        placeholder={
                          targetsLoading ? '加载中...' : '选择测试目标'
                        }
                      />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {targets.map((target) => (
                      <SelectItem key={target.id} value={target.id.toString()}>
                        {target.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <FormDescription>选择发现此漏洞的测试目标</FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />

          {/* 漏洞分类 */}
          <FormField
            control={form.control}
            name='categoryId'
            render={({ field }) => (
              <FormItem>
                <FormLabel>漏洞分类</FormLabel>
                <Select
                  onValueChange={(value) =>
                    field.onChange(value ? parseInt(value) : undefined)
                  }
                  value={field.value?.toString() || ''}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue
                        placeholder={
                          categoriesLoading
                            ? '加载中...'
                            : '选择漏洞分类（可选）'
                        }
                      />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {categories.map((category) => (
                      <SelectItem
                        key={category.id}
                        value={category.id.toString()}
                      >
                        {category.parentName
                          ? `${category.parentName} > ${category.name}`
                          : category.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <FormDescription>选择合适的漏洞分类便于管理</FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />

          {/* 漏洞模板 - 预留功能 */}
          <FormField
            control={form.control}
            name='templateId'
            render={({ field }) => (
              <FormItem>
                <FormLabel>
                  漏洞模板
                  <Badge variant='secondary' className='ml-2'>
                    即将推出
                  </Badge>
                </FormLabel>
                <Select disabled>
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder='模板功能开发中...' />
                    </SelectTrigger>
                  </FormControl>
                </Select>
                <FormDescription className='flex items-center gap-1'>
                  <Sparkles className='h-3 w-3' />
                  选择预定义模板可以快速填充常见漏洞信息
                </FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
      </div>

      {/* 时间管理区块 */}
      <div className='space-y-6'>
        <div>
          <h3 className='flex items-center gap-2 text-lg font-medium'>
            <Calendar className='h-5 w-5' />
            时间管理
          </h3>
          <p className='text-muted-foreground text-sm'>
            记录漏洞的发现时间和修复期限
          </p>
        </div>
        <Separator />

        <div className='grid grid-cols-1 gap-6 md:grid-cols-2'>
          {/* 发现时间 */}
          <FormField
            control={form.control}
            name='foundDate'
            render={({ field }) => (
              <FormItem className='flex flex-col'>
                <FormLabel>发现时间</FormLabel>
                <DatePicker
                  date={field.value}
                  setDate={field.onChange}
                  placeholder='选择漏洞发现日期'
                />
                <FormDescription>
                  默认为今天，可修改为实际发现日期
                </FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />

          {/* 截止修复时间 */}
          <FormField
            control={form.control}
            name='dueDate'
            render={({ field }) => (
              <FormItem className='flex flex-col'>
                <FormLabel>截止修复时间</FormLabel>
                <DatePicker
                  date={field.value}
                  setDate={field.onChange}
                  placeholder='选择修复截止日期（可选）'
                />
                <FormDescription>
                  根据漏洞严重程度设置合理的修复期限
                </FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
      </div>
    </div>
  );
}
