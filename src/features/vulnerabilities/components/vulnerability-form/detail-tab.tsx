'use client';

import { UseFormReturn } from 'react-hook-form';
import {
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { RichTextEditor } from '@/components/ui/rich-text-editor';
import { Separator } from '@/components/ui/separator';
import { MapPin, Code, ArrowRightLeft } from 'lucide-react';
import { CreateVulnerabilityInput } from '../../validations/vulnerability.validation';

interface DetailTabProps {
  form: UseFormReturn<CreateVulnerabilityInput>;
}

export function DetailTab({ form }: DetailTabProps) {
  return (
    <div className='space-y-8'>
      {/* 漏洞位置区块 */}
      <div className='space-y-6'>
        <div>
          <h3 className='flex items-center gap-2 text-lg font-medium'>
            <MapPin className='h-5 w-5' />
            漏洞位置
          </h3>
          <p className='text-muted-foreground text-sm'>
            详细记录漏洞出现的具体位置信息
          </p>
        </div>
        <Separator />

        <div className='grid grid-cols-1 gap-6 md:grid-cols-2'>
          {/* 受影响模块 */}
          <FormField
            control={form.control}
            name='affectedModule'
            render={({ field }) => (
              <FormItem>
                <FormLabel>受影响模块</FormLabel>
                <FormControl>
                  <Input
                    placeholder='如：用户管理模块、订单处理系统'
                    {...field}
                  />
                </FormControl>
                <FormDescription>漏洞所在的功能模块或系统组件</FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />

          {/* 受影响参数 */}
          <FormField
            control={form.control}
            name='affectedParameter'
            render={({ field }) => (
              <FormItem>
                <FormLabel>受影响参数</FormLabel>
                <FormControl>
                  <Input placeholder='如：username、id、search' {...field} />
                </FormControl>
                <FormDescription>具体的参数名称或字段名</FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>

        {/* 受影响URL */}
        <FormField
          control={form.control}
          name='affectedUrl'
          render={({ field }) => (
            <FormItem>
              <FormLabel>受影响URL</FormLabel>
              <FormControl>
                <Input
                  placeholder='https://example.com/admin/users'
                  {...field}
                />
              </FormControl>
              <FormDescription>完整的URL地址，包含协议和路径</FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />

        {/* API端点 */}
        <FormField
          control={form.control}
          name='affectedEndpoint'
          render={({ field }) => (
            <FormItem>
              <FormLabel>API端点</FormLabel>
              <FormControl>
                <Input
                  placeholder='POST /api/v1/users/{id}/update'
                  {...field}
                />
              </FormControl>
              <FormDescription>
                REST API的具体端点，包含HTTP方法
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
      </div>

      {/* 复现步骤区块 */}
      <div className='space-y-6'>
        <div>
          <h3 className='flex items-center gap-2 text-lg font-medium'>
            <Code className='h-5 w-5' />
            复现信息
          </h3>
          <p className='text-muted-foreground text-sm'>
            记录漏洞的复现步骤和相关代码
          </p>
        </div>
        <Separator />

        {/* 复现步骤 */}
        <FormField
          control={form.control}
          name='reproductionSteps'
          render={({ field }) => (
            <FormItem>
              <FormLabel>复现步骤</FormLabel>
              <FormControl>
                <RichTextEditor
                  content={field.value}
                  placeholder='详细记录漏洞复现的步骤，支持有序列表、插入截图等格式'
                  onChange={field.onChange}
                  minHeight='200px'
                />
              </FormControl>
              <FormDescription>
                支持富文本格式，可插入截图展示每个步骤，便于其他人员重现漏洞
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />

        {/* POC代码 */}
        <FormField
          control={form.control}
          name='proofOfConcept'
          render={({ field }) => (
            <FormItem>
              <FormLabel>POC代码</FormLabel>
              <FormControl>
                <RichTextEditor
                  content={field.value}
                  placeholder='概念验证代码、载荷、脚本等，支持代码块语法高亮'
                  onChange={field.onChange}
                  minHeight='200px'
                />
              </FormControl>
              <FormDescription>
                支持代码块语法高亮，可插入多种格式的POC代码、载荷和执行截图
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
      </div>

      {/* 请求响应区块 */}
      <div className='space-y-6'>
        <div>
          <h3 className='flex items-center gap-2 text-lg font-medium'>
            <ArrowRightLeft className='h-5 w-5' />
            请求响应数据
          </h3>
          <p className='text-muted-foreground text-sm'>
            记录完整的HTTP请求和响应信息
          </p>
        </div>
        <Separator />

        <div className='grid grid-cols-1 gap-6 md:grid-cols-2'>
          {/* 请求数据 */}
          <FormField
            control={form.control}
            name='requestData'
            render={({ field }) => (
              <FormItem>
                <FormLabel>请求数据</FormLabel>
                <FormControl>
                  <RichTextEditor
                    content={field.value}
                    placeholder='完整的HTTP请求头和请求体，支持代码块格式'
                    onChange={field.onChange}
                    minHeight='180px'
                    showToolbar={true}
                  />
                </FormControl>
                <FormDescription>
                  支持代码块语法高亮，便于展示HTTP请求数据
                </FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />

          {/* 响应数据 */}
          <FormField
            control={form.control}
            name='responseData'
            render={({ field }) => (
              <FormItem>
                <FormLabel>响应数据</FormLabel>
                <FormControl>
                  <RichTextEditor
                    content={field.value}
                    placeholder='服务器的响应头和响应体，支持代码块格式'
                    onChange={field.onChange}
                    minHeight='180px'
                    showToolbar={true}
                  />
                </FormControl>
                <FormDescription>
                  支持代码块语法高亮，便于展示HTTP响应数据
                </FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
      </div>
    </div>
  );
}
