'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle
} from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Form } from '@/components/ui/form';
import { Badge } from '@/components/ui/badge';
import { toast } from 'sonner';
import { useRouter } from 'next/navigation';
import {
  Loader2,
  Bug as BugIcon,
  Info,
  FileText,
  AlertTriangle,
  Wrench,
  Save,
  CheckCircle
} from 'lucide-react';
import {
  CreateVulnerabilitySchema,
  type CreateVulnerabilityInput
} from '../../validations/vulnerability.validation';
import {
  useCreateVulnerability,
  useUpdateVulnerability
} from '../../hooks/useVulnerabilities';
import type { VulnerabilityDTO } from '../../types';
import { BasicInfoTab } from './basic-info-tab';
import { DetailTab } from './detail-tab';
import { ImpactTab } from './impact-tab';
import { RemediationTab } from './remediation-tab';

interface VulnerabilityFormProps {
  initialData?: VulnerabilityDTO | null;
  mode?: 'create' | 'edit';
}

// Tab配置
const tabs = [
  {
    value: 'basic',
    label: '基本信息',
    icon: Info,
    description: '漏洞的核心识别信息',
    required: true
  },
  {
    value: 'detail',
    label: '漏洞详情',
    icon: FileText,
    description: '漏洞的技术细节和复现步骤',
    required: false
  },
  {
    value: 'impact',
    label: '影响评估',
    icon: AlertTriangle,
    description: '评估漏洞的影响程度和风险',
    required: false
  },
  {
    value: 'remediation',
    label: '修复建议',
    icon: Wrench,
    description: '提供修复方案和标准映射',
    required: false
  }
];

export function VulnerabilityForm({
  initialData,
  mode = 'create'
}: VulnerabilityFormProps) {
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState('basic');

  const { create } = useCreateVulnerability();
  const { update } = useUpdateVulnerability(initialData?.id || 0);

  const form = useForm<CreateVulnerabilityInput>({
    resolver: zodResolver(CreateVulnerabilitySchema),
    defaultValues: initialData
      ? {
          title: initialData.title,
          description: initialData.description,
          severity: initialData.severity,
          status: initialData.status,
          targetId: initialData.target.id,
          categoryId: initialData.category?.id,
          templateId: undefined, // 模板功能暂不支持
          foundDate: initialData.foundDate
            ? new Date(initialData.foundDate)
            : undefined,
          dueDate: initialData.dueDate
            ? new Date(initialData.dueDate)
            : undefined
          // 其他字段根据需要映射...
        }
      : {
          title: '',
          description: '',
          severity: 'MEDIUM',
          status: 'OPEN',
          targetId: 0,
          categoryId: undefined,
          templateId: undefined,
          foundDate: new Date(),
          dueDate: undefined,
          // 其他字段使用默认值
          affectedModule: '',
          affectedParameter: '',
          affectedUrl: '',
          affectedEndpoint: '',
          reproductionSteps: '',
          proofOfConcept: '',
          requestData: '',
          responseData: '',
          impact: '',
          businessImpact: undefined,
          affectedUsers: undefined,
          dataExposure: undefined,
          recommendation: '',
          workaround: '',
          references: '',
          cvssScore: undefined,
          cvssVector: '',
          cvssVersion: '3.1',
          exploitability: undefined,
          cweId: '',
          cveId: '',
          owaspId: ''
        }
  });

  const onSubmit = async (values: CreateVulnerabilityInput) => {
    try {
      setLoading(true);

      if (mode === 'edit' && initialData) {
        const result = await update(values);
        if (result) {
          toast.success('漏洞更新成功');
          router.push('/dashboard/vulnerabilities');
        }
      } else {
        const result = await create(values);
        if (result) {
          toast.success('漏洞创建成功');
          router.push('/dashboard/vulnerabilities');
        }
      }
    } catch (error) {
      toast.error('操作失败，请重试');
    } finally {
      setLoading(false);
    }
  };

  // 计算各Tab的完成度
  const getTabCompletion = (tabValue: string) => {
    const values = form.getValues();
    let completed = 0;
    let total = 0;

    switch (tabValue) {
      case 'basic':
        total = 3; // 必填字段数量
        if (values.title) completed++;
        if (values.description) completed++;
        if (values.targetId && values.targetId > 0) completed++;
        break;
      case 'detail':
        total = 4;
        if (values.affectedUrl) completed++;
        if (values.reproductionSteps) completed++;
        if (values.proofOfConcept) completed++;
        if (values.requestData || values.responseData) completed++;
        break;
      case 'impact':
        total = 3;
        if (values.impact) completed++;
        if (values.businessImpact) completed++;
        if (values.cvssScore) completed++;
        break;
      case 'remediation':
        total = 2;
        if (values.recommendation) completed++;
        if (values.references || values.cweId) completed++;
        break;
    }

    return {
      completed,
      total,
      percentage: Math.round((completed / total) * 100)
    };
  };

  return (
    <Card className='mx-auto w-full max-w-6xl'>
      <CardHeader>
        <CardTitle className='flex items-center gap-2'>
          <BugIcon className='h-5 w-5' />
          {mode === 'edit' ? '编辑漏洞' : '新增漏洞'}
        </CardTitle>
        <CardDescription>
          {mode === 'edit' ? '更新漏洞信息和详情' : '记录新发现的安全漏洞信息'}
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-6'>
            <Tabs value={activeTab} onValueChange={setActiveTab}>
              <TabsList className='grid h-auto w-full grid-cols-4'>
                {tabs.map((tab) => {
                  const completion = getTabCompletion(tab.value);
                  const Icon = tab.icon;

                  return (
                    <TabsTrigger
                      key={tab.value}
                      value={tab.value}
                      className='flex h-auto min-h-[60px] flex-col items-center gap-1 px-2 py-3 text-xs sm:text-sm'
                    >
                      <div className='flex flex-wrap items-center justify-center gap-1.5'>
                        <Icon className='h-3 w-3 flex-shrink-0 sm:h-4 sm:w-4' />
                        <span className='truncate text-center leading-tight'>
                          {tab.label}
                        </span>
                        {tab.required && (
                          <Badge
                            variant='secondary'
                            className='h-3 flex-shrink-0 px-1 text-[8px] sm:h-4 sm:px-1.5 sm:text-[10px]'
                          >
                            必填
                          </Badge>
                        )}
                      </div>
                      <div className='text-muted-foreground text-[10px] leading-none sm:text-xs'>
                        {completion.completed}/{completion.total}
                      </div>
                    </TabsTrigger>
                  );
                })}
              </TabsList>

              <div className='mt-6'>
                {tabs.map((tab) => (
                  <TabsContent
                    key={tab.value}
                    value={tab.value}
                    className='space-y-6'
                  >
                    <div className='border-b pb-4 text-center'>
                      <h3 className='flex items-center justify-center gap-2 text-lg font-medium'>
                        <tab.icon className='h-5 w-5' />
                        {tab.label}
                      </h3>
                      <p className='text-muted-foreground mt-1 text-sm'>
                        {tab.description}
                      </p>
                    </div>

                    {tab.value === 'basic' && <BasicInfoTab form={form} />}
                    {tab.value === 'detail' && <DetailTab form={form} />}
                    {tab.value === 'impact' && <ImpactTab form={form} />}
                    {tab.value === 'remediation' && (
                      <RemediationTab form={form} />
                    )}
                  </TabsContent>
                ))}
              </div>
            </Tabs>

            {/* 表单底部操作区 */}
            <div className='flex flex-col gap-4 border-t pt-6'>
              <div className='flex items-center justify-between'>
                <div className='text-muted-foreground text-sm'>
                  确保必填信息完整后可以提交保存
                </div>
                <div className='flex items-center gap-2'>
                  {/* Tab导航按钮 */}
                  <div className='flex items-center gap-1'>
                    {tabs.map((tab, index) => (
                      <Button
                        key={tab.value}
                        type='button'
                        variant={
                          activeTab === tab.value ? 'default' : 'outline'
                        }
                        size='sm'
                        onClick={() => setActiveTab(tab.value)}
                        className='h-8'
                      >
                        {index + 1}. {tab.label}
                      </Button>
                    ))}
                  </div>
                </div>
              </div>

              <div className='flex items-center justify-end gap-2'>
                <Button
                  type='button'
                  variant='outline'
                  onClick={() => router.back()}
                  disabled={loading}
                >
                  取消
                </Button>
                <Button
                  type='submit'
                  disabled={loading}
                  className='min-w-[120px]'
                >
                  {loading ? (
                    <>
                      <Loader2 className='mr-2 h-4 w-4 animate-spin' />
                      保存中...
                    </>
                  ) : (
                    <>
                      <Save className='mr-2 h-4 w-4' />
                      {mode === 'edit' ? '更新漏洞' : '创建漏洞'}
                    </>
                  )}
                </Button>
              </div>
            </div>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
}
