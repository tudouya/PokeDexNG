'use client';

import { useState, useCallback, useRef, useEffect } from 'react';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle
} from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue
} from '@/components/ui/select';
import { Skeleton } from '@/components/ui/skeleton';
import { Alert, AlertDescription } from '@/components/ui/alert';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger
} from '@/components/ui/dialog';
import { Label } from '@/components/ui/label';
import {
  Search,
  Filter,
  Bug,
  AlertTriangle,
  Calendar,
  User,
  Target,
  ChevronRight,
  ChevronDown,
  Shield,
  Clock,
  Globe,
  FileText,
  TrendingUp
} from 'lucide-react';
import { useVulnerabilities } from '../hooks/useVulnerabilities';
import { VulnerabilityListParams, VulnerabilityDTO } from '../types';
import {
  VULNERABILITY_SEVERITY_OPTIONS,
  VULNERABILITY_STATUS_OPTIONS,
  getColorByValue
} from './vulnerability-tables/options';
import Link from 'next/link';
import { format } from 'date-fns';
import { zhCN } from 'date-fns/locale';

export function VulnerabilityListing() {
  const [searchParams, setSearchParams] = useState<VulnerabilityListParams>({
    page: 1,
    limit: 10,
    search: '',
    severity: undefined,
    status: undefined,
    sortBy: 'createdAt',
    sortOrder: 'desc'
  });

  const [isAdvancedFilterOpen, setIsAdvancedFilterOpen] = useState(false);
  const [advancedFilters, setAdvancedFilters] = useState({
    dateRange: {
      from: '',
      to: ''
    },
    cvssRange: {
      min: '',
      max: ''
    },
    targetId: '',
    categoryId: '',
    assignedTo: ''
  });

  const { data, loading, error, refetch } = useVulnerabilities(searchParams);

  // 防抖搜索
  const searchTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const handleSearch = useCallback((search: string) => {
    if (searchTimeoutRef.current) {
      clearTimeout(searchTimeoutRef.current);
    }

    searchTimeoutRef.current = setTimeout(() => {
      setSearchParams((prev) => ({ ...prev, search, page: 1 }));
    }, 300);
  }, []);

  // 清理定时器
  useEffect(() => {
    return () => {
      if (searchTimeoutRef.current) {
        clearTimeout(searchTimeoutRef.current);
      }
    };
  }, []);

  // 立即搜索（用于清除搜索）
  const handleSearchImmediate = (search: string) => {
    if (searchTimeoutRef.current) {
      clearTimeout(searchTimeoutRef.current);
    }
    setSearchParams((prev) => ({ ...prev, search, page: 1 }));
  };

  const handleSeverityFilter = (severity: string[]) => {
    setSearchParams((prev) => ({
      ...prev,
      severity: severity.length > 0 ? (severity as any) : undefined,
      page: 1
    }));
  };

  const handleStatusFilter = (status: string[]) => {
    setSearchParams((prev) => ({
      ...prev,
      status: status.length > 0 ? (status as any) : undefined,
      page: 1
    }));
  };

  const handlePageChange = (page: number) => {
    setSearchParams((prev) => ({ ...prev, page }));
  };

  const handleSortChange = (sortValue: string) => {
    const [sortBy, sortOrder] = sortValue.split('-') as [any, 'asc' | 'desc'];
    setSearchParams((prev) => ({
      ...prev,
      sortBy,
      sortOrder,
      page: 1
    }));
  };

  if (error) {
    return (
      <Alert variant='destructive'>
        <AlertTriangle className='h-4 w-4' />
        <AlertDescription>
          加载漏洞列表失败: {error}
          <Button
            variant='outline'
            size='sm'
            className='ml-2'
            onClick={() => refetch()}
          >
            重试
          </Button>
        </AlertDescription>
      </Alert>
    );
  }

  return (
    <div className='space-y-6'>
      {/* 搜索和筛选区 */}
      <Card>
        <CardHeader>
          <CardTitle className='flex items-center gap-2'>
            <Filter className='h-5 w-5' />
            搜索筛选
          </CardTitle>
          <CardDescription>
            通过关键词、严重程度、状态等条件筛选漏洞
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className='space-y-4'>
            {/* 第一行：搜索框和排序 */}
            <div className='grid grid-cols-1 gap-4 md:grid-cols-3'>
              <div className='md:col-span-2'>
                <div className='relative'>
                  <Search className='text-muted-foreground absolute top-2.5 left-2 h-4 w-4' />
                  <Input
                    placeholder='搜索漏洞标题、描述或URL...'
                    value={searchParams.search || ''}
                    onChange={(e) => handleSearch(e.target.value)}
                    className='pl-8'
                  />
                </div>
              </div>

              {/* 排序选择器 */}
              <Select
                value={`${searchParams.sortBy}-${searchParams.sortOrder}`}
                onValueChange={handleSortChange}
              >
                <SelectTrigger>
                  <SelectValue placeholder='排序方式' />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value='createdAt-desc'>最新发现</SelectItem>
                  <SelectItem value='createdAt-asc'>最早发现</SelectItem>
                  <SelectItem value='foundDate-desc'>
                    发现时间（新→旧）
                  </SelectItem>
                  <SelectItem value='foundDate-asc'>
                    发现时间（旧→新）
                  </SelectItem>
                  <SelectItem value='severity-desc'>
                    严重程度（高→低）
                  </SelectItem>
                  <SelectItem value='severity-asc'>
                    严重程度（低→高）
                  </SelectItem>
                  <SelectItem value='status-asc'>状态</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {/* 第二行：筛选器 */}
            <div className='grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4'>
              {/* 严重程度筛选 */}
              <Select
                onValueChange={(value) =>
                  handleSeverityFilter(value === 'all' ? [] : [value])
                }
              >
                <SelectTrigger>
                  <SelectValue placeholder='严重程度' />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value='all'>全部严重程度</SelectItem>
                  {VULNERABILITY_SEVERITY_OPTIONS.map((option) => (
                    <SelectItem key={option.value} value={option.value}>
                      <div className='flex items-center gap-2'>
                        <div
                          className='h-2 w-2 rounded-full'
                          style={{ backgroundColor: option.color }}
                        />
                        {option.label}
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>

              {/* 状态筛选 */}
              <Select
                onValueChange={(value) =>
                  handleStatusFilter(value === 'all' ? [] : [value])
                }
              >
                <SelectTrigger>
                  <SelectValue placeholder='状态' />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value='all'>全部状态</SelectItem>
                  {VULNERABILITY_STATUS_OPTIONS.map((option) => (
                    <SelectItem key={option.value} value={option.value}>
                      <div className='flex items-center gap-2'>
                        <div
                          className='h-2 w-2 rounded-full'
                          style={{ backgroundColor: option.color }}
                        />
                        {option.label}
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>

              {/* 高级筛选按钮 */}
              <div className='flex items-center justify-end gap-2 lg:col-span-2'>
                <Dialog
                  open={isAdvancedFilterOpen}
                  onOpenChange={setIsAdvancedFilterOpen}
                >
                  <DialogTrigger asChild>
                    <Button variant='outline' size='sm' className='text-xs'>
                      <Filter className='mr-1 h-3 w-3' />
                      高级筛选
                    </Button>
                  </DialogTrigger>
                  <AdvancedFilterDialog
                    filters={advancedFilters}
                    onFiltersChange={setAdvancedFilters}
                    onApply={() => {
                      // TODO: 应用高级筛选条件
                      setIsAdvancedFilterOpen(false);
                    }}
                  />
                </Dialog>

                {/* 导出按钮 */}
                <Button
                  variant='outline'
                  size='sm'
                  className='text-xs'
                  disabled
                >
                  <FileText className='mr-1 h-3 w-3' />
                  导出
                </Button>
              </div>
            </div>

            {/* 当前筛选条件标签 */}
            {(searchParams.search ||
              searchParams.severity ||
              searchParams.status) && (
              <div className='flex flex-wrap gap-2'>
                {searchParams.search && (
                  <Badge variant='secondary' className='text-xs'>
                    搜索: {searchParams.search}
                    <button
                      className='hover:bg-secondary-foreground/20 ml-1 rounded-full'
                      onClick={() => handleSearchImmediate('')}
                    >
                      ×
                    </button>
                  </Badge>
                )}
                {searchParams.severity && (
                  <Badge variant='secondary' className='text-xs'>
                    严重程度:{' '}
                    {
                      VULNERABILITY_SEVERITY_OPTIONS.find((opt) =>
                        searchParams.severity?.includes(opt.value)
                      )?.label
                    }
                    <button
                      className='hover:bg-secondary-foreground/20 ml-1 rounded-full'
                      onClick={() => handleSeverityFilter([])}
                    >
                      ×
                    </button>
                  </Badge>
                )}
                {searchParams.status && (
                  <Badge variant='secondary' className='text-xs'>
                    状态:{' '}
                    {
                      VULNERABILITY_STATUS_OPTIONS.find((opt) =>
                        searchParams.status?.includes(opt.value)
                      )?.label
                    }
                    <button
                      className='hover:bg-secondary-foreground/20 ml-1 rounded-full'
                      onClick={() => handleStatusFilter([])}
                    >
                      ×
                    </button>
                  </Badge>
                )}
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* 漏洞列表 */}
      {loading ? (
        <div className='grid grid-cols-1 gap-4 md:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4'>
          {Array.from({ length: 8 }).map((_, i) => (
            <Card key={i} className='h-fit'>
              <CardContent className='p-4'>
                <div className='space-y-3'>
                  <div className='flex items-start justify-between gap-2'>
                    <div className='flex gap-2'>
                      <Skeleton className='h-5 w-12' />
                      <Skeleton className='h-5 w-16' />
                    </div>
                    <Skeleton className='h-4 w-8' />
                  </div>
                  <div className='space-y-2'>
                    <Skeleton className='h-5 w-full' />
                    <Skeleton className='h-4 w-4/5' />
                  </div>
                  <div className='grid grid-cols-2 gap-2'>
                    <Skeleton className='h-4 w-full' />
                    <Skeleton className='h-4 w-full' />
                    <Skeleton className='h-4 w-full' />
                    <Skeleton className='h-4 w-full' />
                  </div>
                  <div className='flex justify-between pt-2'>
                    <Skeleton className='h-6 w-16' />
                    <Skeleton className='h-6 w-16' />
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      ) : data?.vulnerabilities.length === 0 ? (
        <Card>
          <CardContent className='flex flex-col items-center justify-center py-12'>
            <Bug className='text-muted-foreground mb-4 h-12 w-12' />
            <h3 className='mb-2 text-lg font-semibold'>暂无漏洞记录</h3>
            <p className='text-muted-foreground mb-4 text-center'>
              还没有录入任何漏洞信息，点击右上角的"录入漏洞"按钮开始记录
            </p>
            <Link href='/dashboard/vulnerabilities/new'>
              <Button>
                <Bug className='mr-2 h-4 w-4' />
                录入漏洞
              </Button>
            </Link>
          </CardContent>
        </Card>
      ) : (
        <>
          {/* 响应式卡片网格 */}
          <div className='grid grid-cols-1 gap-4 md:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4'>
            {data?.vulnerabilities.map((vulnerability) => (
              <VulnerabilityCard
                key={vulnerability.id}
                vulnerability={vulnerability}
              />
            ))}
          </div>

          {/* 统计信息和分页 */}
          {data && (
            <div className='space-y-4'>
              {/* 统计信息 */}
              <div className='flex items-center justify-between'>
                <div className='text-muted-foreground text-sm'>
                  共找到{' '}
                  <span className='text-foreground font-medium'>
                    {data.total}
                  </span>{' '}
                  个漏洞
                  {data.total > 0 && (
                    <>
                      ，显示第{' '}
                      <span className='text-foreground font-medium'>
                        {(data.page - 1) * data.limit + 1}
                      </span>{' '}
                      -{' '}
                      <span className='text-foreground font-medium'>
                        {Math.min(data.page * data.limit, data.total)}
                      </span>{' '}
                      条
                    </>
                  )}
                </div>
                {data.totalPages > 1 && (
                  <div className='text-muted-foreground text-xs'>
                    第 {data.page} / {data.totalPages} 页
                  </div>
                )}
              </div>

              {/* 分页控制 */}
              {data.totalPages > 1 && (
                <div className='flex items-center justify-center gap-2'>
                  <Button
                    variant='outline'
                    size='sm'
                    disabled={data.page <= 1}
                    onClick={() => handlePageChange(data.page - 1)}
                  >
                    上一页
                  </Button>
                  <Button
                    variant='outline'
                    size='sm'
                    disabled={data.page >= data.totalPages}
                    onClick={() => handlePageChange(data.page + 1)}
                  >
                    下一页
                  </Button>
                </div>
              )}
            </div>
          )}
        </>
      )}
    </div>
  );
}

// 漏洞卡片组件
function VulnerabilityCard({
  vulnerability
}: {
  vulnerability: VulnerabilityDTO;
}) {
  const [isExpanded, setIsExpanded] = useState(false);

  const severityColor = getColorByValue(
    VULNERABILITY_SEVERITY_OPTIONS,
    vulnerability.severity
  );
  const statusColor = getColorByValue(
    VULNERABILITY_STATUS_OPTIONS,
    vulnerability.status
  );

  const severityOption = VULNERABILITY_SEVERITY_OPTIONS.find(
    (opt) => opt.value === vulnerability.severity
  );
  const statusOption = VULNERABILITY_STATUS_OPTIONS.find(
    (opt) => opt.value === vulnerability.status
  );

  return (
    <Card className='h-fit transition-all duration-300 hover:shadow-md'>
      <CardContent className='p-4'>
        <div className='space-y-3'>
          {/* 核心信息区 - 始终显示 */}
          <div className='space-y-3'>
            {/* 顶部标签和ID */}
            <div className='flex items-start justify-between gap-2'>
              <div className='flex gap-2'>
                <Badge
                  className='px-2 py-1 text-xs font-medium'
                  style={{ backgroundColor: severityColor, color: 'white' }}
                >
                  {severityOption?.label}
                </Badge>
                <Badge
                  variant='outline'
                  className='px-2 py-1 text-xs'
                  style={{ borderColor: statusColor, color: statusColor }}
                >
                  {statusOption?.label}
                </Badge>
              </div>
              <span className='text-muted-foreground text-xs'>
                #{vulnerability.id}
              </span>
            </div>

            {/* 标题 */}
            <div>
              <Link
                href={`/dashboard/vulnerabilities/${vulnerability.id}`}
                className='group block'
              >
                <h3 className='group-hover:text-primary mb-1 line-clamp-2 text-base font-semibold transition-colors'>
                  {vulnerability.title}
                </h3>
              </Link>
              <p className='text-muted-foreground line-clamp-2 text-sm'>
                {vulnerability.description}
              </p>
            </div>

            {/* 基础信息 */}
            <div className='grid grid-cols-2 gap-2 text-sm'>
              <div className='text-muted-foreground flex items-center gap-2'>
                <Target className='h-4 w-4 flex-shrink-0' />
                <span className='truncate'>{vulnerability.target.name}</span>
              </div>
              <div className='text-muted-foreground flex items-center gap-2'>
                <User className='h-4 w-4 flex-shrink-0' />
                <span className='truncate'>
                  {vulnerability.foundByUser.fullName ||
                    vulnerability.foundByUser.username}
                </span>
              </div>
              <div className='text-muted-foreground flex items-center gap-2'>
                <Calendar className='h-4 w-4 flex-shrink-0' />
                <span className='truncate'>
                  {format(new Date(vulnerability.foundDate), 'MM月dd日', {
                    locale: zhCN
                  })}
                </span>
              </div>
              <div className='text-muted-foreground flex items-center gap-2'>
                {vulnerability.cvssScore ? (
                  <>
                    <Shield className='h-4 w-4 flex-shrink-0' />
                    <span className='font-medium'>
                      CVSS {vulnerability.cvssScore.toFixed(1)}
                    </span>
                  </>
                ) : (
                  <>
                    <Shield className='h-4 w-4 flex-shrink-0' />
                    <span>评分待定</span>
                  </>
                )}
              </div>
            </div>
          </div>

          {/* 展开详情区域 */}
          {isExpanded && (
            <div className='border-border animate-in slide-in-from-top-2 space-y-3 border-t pt-3'>
              {/* 位置信息 */}
              {(vulnerability.affectedUrl || vulnerability.category) && (
                <div className='space-y-2'>
                  <h4 className='text-foreground text-sm font-medium'>
                    位置信息
                  </h4>
                  <div className='grid grid-cols-1 gap-2 text-sm'>
                    {vulnerability.affectedUrl && (
                      <div className='text-muted-foreground flex items-start gap-2'>
                        <Globe className='mt-0.5 h-4 w-4 flex-shrink-0' />
                        <span className='text-xs break-all'>
                          {vulnerability.affectedUrl}
                        </span>
                      </div>
                    )}
                    {vulnerability.category && (
                      <div className='text-muted-foreground flex items-center gap-2'>
                        <FileText className='h-4 w-4 flex-shrink-0' />
                        <span className='truncate'>
                          {vulnerability.category.name}
                        </span>
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* 安全评估 */}
              {(vulnerability.cweId || vulnerability.businessImpact) && (
                <div className='space-y-2'>
                  <h4 className='text-foreground text-sm font-medium'>
                    安全评估
                  </h4>
                  <div className='grid grid-cols-1 gap-2 text-sm'>
                    {vulnerability.cweId && (
                      <div className='text-muted-foreground flex items-center gap-2'>
                        <TrendingUp className='h-4 w-4 flex-shrink-0' />
                        <span>CWE: {vulnerability.cweId}</span>
                      </div>
                    )}
                    {vulnerability.businessImpact && (
                      <div className='text-muted-foreground flex items-center gap-2'>
                        <AlertTriangle className='h-4 w-4 flex-shrink-0' />
                        <span>业务影响: {vulnerability.businessImpact}</span>
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* 时间线 */}
              <div className='space-y-2'>
                <h4 className='text-foreground text-sm font-medium'>时间线</h4>
                <div className='text-muted-foreground space-y-1.5 text-xs'>
                  <div className='flex items-center gap-2'>
                    <Clock className='h-3 w-3' />
                    <span>
                      发现:{' '}
                      {format(
                        new Date(vulnerability.foundDate),
                        'yyyy-MM-dd HH:mm',
                        { locale: zhCN }
                      )}
                    </span>
                  </div>
                  {vulnerability.confirmedAt && (
                    <div className='flex items-center gap-2'>
                      <Clock className='h-3 w-3' />
                      <span>
                        确认:{' '}
                        {format(
                          new Date(vulnerability.confirmedAt),
                          'yyyy-MM-dd HH:mm',
                          { locale: zhCN }
                        )}
                      </span>
                    </div>
                  )}
                  {vulnerability.fixedAt && (
                    <div className='flex items-center gap-2'>
                      <Clock className='h-3 w-3' />
                      <span>
                        修复:{' '}
                        {format(
                          new Date(vulnerability.fixedAt),
                          'yyyy-MM-dd HH:mm',
                          { locale: zhCN }
                        )}
                      </span>
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}

          {/* 底部操作区 */}
          <div className='flex items-center justify-between pt-2'>
            <Button
              variant='ghost'
              size='sm'
              onClick={() => setIsExpanded(!isExpanded)}
              className='h-8 px-2 text-xs'
            >
              {isExpanded ? (
                <>
                  <ChevronDown className='mr-1 h-3 w-3' />
                  收起详情
                </>
              ) : (
                <>
                  <ChevronRight className='mr-1 h-3 w-3' />
                  展开详情
                </>
              )}
            </Button>

            <div className='flex items-center gap-1'>
              <Link
                href={`/dashboard/vulnerabilities/${vulnerability.id}`}
                className='text-primary hover:text-primary/80 transition-colors'
              >
                <Button variant='ghost' size='sm' className='h-8 px-2 text-xs'>
                  查看详情
                </Button>
              </Link>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

// 高级筛选对话框组件
interface AdvancedFilterDialogProps {
  filters: {
    dateRange: { from: string; to: string };
    cvssRange: { min: string; max: string };
    targetId: string;
    categoryId: string;
    assignedTo: string;
  };
  onFiltersChange: (filters: any) => void;
  onApply: () => void;
}

function AdvancedFilterDialog({
  filters,
  onFiltersChange,
  onApply
}: AdvancedFilterDialogProps) {
  const handleFieldChange = (field: string, value: any) => {
    onFiltersChange({
      ...filters,
      [field]: value
    });
  };

  const handleRangeChange = (
    rangeType: 'dateRange' | 'cvssRange',
    field: 'from' | 'to' | 'min' | 'max',
    value: string
  ) => {
    onFiltersChange({
      ...filters,
      [rangeType]: {
        ...filters[rangeType],
        [field]: value
      }
    });
  };

  const resetFilters = () => {
    onFiltersChange({
      dateRange: { from: '', to: '' },
      cvssRange: { min: '', max: '' },
      targetId: '',
      categoryId: '',
      assignedTo: ''
    });
  };

  return (
    <DialogContent className='sm:max-w-[500px]'>
      <DialogHeader>
        <DialogTitle className='flex items-center gap-2'>
          <Filter className='h-5 w-5' />
          高级筛选条件
        </DialogTitle>
        <DialogDescription>
          设置更详细的筛选条件来精确查找漏洞
        </DialogDescription>
      </DialogHeader>

      <div className='space-y-6 py-4'>
        {/* 日期范围 */}
        <div className='space-y-3'>
          <Label className='text-sm font-medium'>发现时间范围</Label>
          <div className='grid grid-cols-2 gap-3'>
            <div className='space-y-2'>
              <Label className='text-muted-foreground text-xs'>开始日期</Label>
              <Input
                type='date'
                value={filters.dateRange.from}
                onChange={(e) =>
                  handleRangeChange('dateRange', 'from', e.target.value)
                }
                className='text-sm'
              />
            </div>
            <div className='space-y-2'>
              <Label className='text-muted-foreground text-xs'>结束日期</Label>
              <Input
                type='date'
                value={filters.dateRange.to}
                onChange={(e) =>
                  handleRangeChange('dateRange', 'to', e.target.value)
                }
                className='text-sm'
              />
            </div>
          </div>
        </div>

        {/* CVSS分数范围 */}
        <div className='space-y-3'>
          <Label className='text-sm font-medium'>CVSS 评分范围</Label>
          <div className='grid grid-cols-2 gap-3'>
            <div className='space-y-2'>
              <Label className='text-muted-foreground text-xs'>最低分数</Label>
              <Input
                type='number'
                min='0'
                max='10'
                step='0.1'
                placeholder='0.0'
                value={filters.cvssRange.min}
                onChange={(e) =>
                  handleRangeChange('cvssRange', 'min', e.target.value)
                }
                className='text-sm'
              />
            </div>
            <div className='space-y-2'>
              <Label className='text-muted-foreground text-xs'>最高分数</Label>
              <Input
                type='number'
                min='0'
                max='10'
                step='0.1'
                placeholder='10.0'
                value={filters.cvssRange.max}
                onChange={(e) =>
                  handleRangeChange('cvssRange', 'max', e.target.value)
                }
                className='text-sm'
              />
            </div>
          </div>
        </div>

        {/* 目标筛选 */}
        <div className='space-y-2'>
          <Label className='text-sm font-medium'>目标系统</Label>
          <Select
            value={filters.targetId}
            onValueChange={(value) => handleFieldChange('targetId', value)}
          >
            <SelectTrigger className='text-sm'>
              <SelectValue placeholder='选择目标系统' />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value=''>全部目标</SelectItem>
              {/* TODO: 从API获取目标列表 */}
              <SelectItem value='1'>示例目标 1</SelectItem>
              <SelectItem value='2'>示例目标 2</SelectItem>
            </SelectContent>
          </Select>
        </div>

        {/* 漏洞分类 */}
        <div className='space-y-2'>
          <Label className='text-sm font-medium'>漏洞分类</Label>
          <Select
            value={filters.categoryId}
            onValueChange={(value) => handleFieldChange('categoryId', value)}
          >
            <SelectTrigger className='text-sm'>
              <SelectValue placeholder='选择漏洞分类' />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value=''>全部分类</SelectItem>
              {/* TODO: 从API获取分类列表 */}
              <SelectItem value='1'>SQL注入</SelectItem>
              <SelectItem value='2'>XSS跨站脚本</SelectItem>
              <SelectItem value='3'>身份验证缺陷</SelectItem>
            </SelectContent>
          </Select>
        </div>

        {/* 指派人员 */}
        <div className='space-y-2'>
          <Label className='text-sm font-medium'>指派给</Label>
          <Select
            value={filters.assignedTo}
            onValueChange={(value) => handleFieldChange('assignedTo', value)}
          >
            <SelectTrigger className='text-sm'>
              <SelectValue placeholder='选择指派人员' />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value=''>全部人员</SelectItem>
              {/* TODO: 从API获取用户列表 */}
              <SelectItem value='1'>张三</SelectItem>
              <SelectItem value='2'>李四</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>

      {/* 操作按钮 */}
      <div className='flex items-center justify-between border-t pt-4'>
        <Button variant='ghost' size='sm' onClick={resetFilters}>
          重置条件
        </Button>
        <div className='flex gap-2'>
          <Button variant='outline' size='sm' onClick={() => onApply()}>
            取消
          </Button>
          <Button size='sm' onClick={onApply}>
            应用筛选
          </Button>
        </div>
      </div>
    </DialogContent>
  );
}
