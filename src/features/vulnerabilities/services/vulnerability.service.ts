import { prisma } from '@/lib/db';
import {
  CreateVulnerabilityInput,
  UpdateVulnerabilityInput,
  VulnerabilityListParams,
  VulnerabilityListResponse,
  VulnerabilityDTO,
  Vulnerability
} from '../types';
import { Prisma } from '@prisma/client';

export class VulnerabilityService {
  // 创建漏洞
  async create(
    input: CreateVulnerabilityInput,
    userId: number
  ): Promise<VulnerabilityDTO> {
    const vulnerability = await prisma.vulnerability.create({
      data: {
        ...input,
        foundBy: userId,
        templateId: null, // 暂时不支持模板功能
        foundDate: input.foundDate || new Date()
      },
      include: {
        target: {
          select: { id: true, name: true, projectName: true }
        },
        category: {
          select: { id: true, name: true }
        },
        template: {
          select: { id: true, name: true }
        },
        foundByUser: {
          select: { id: true, username: true, fullName: true }
        },
        assignedToUser: {
          select: { id: true, username: true, fullName: true }
        }
      }
    });

    return this.toDTO(vulnerability);
  }

  // 更新漏洞
  async update(
    input: UpdateVulnerabilityInput,
    userId: number
  ): Promise<VulnerabilityDTO> {
    const { id, ...updateData } = input;

    // 检查漏洞是否存在
    const existingVuln = await prisma.vulnerability.findUnique({
      where: { id },
      select: { id: true }
    });

    if (!existingVuln) {
      throw new Error('漏洞不存在');
    }

    // 权限验证已禁用 - 待RBAC统一实现

    const vulnerability = await prisma.vulnerability.update({
      where: { id },
      data: updateData,
      include: {
        target: {
          select: { id: true, name: true, projectName: true }
        },
        category: {
          select: { id: true, name: true }
        },
        template: {
          select: { id: true, name: true }
        },
        foundByUser: {
          select: { id: true, username: true, fullName: true }
        },
        assignedToUser: {
          select: { id: true, username: true, fullName: true }
        }
      }
    });

    return this.toDTO(vulnerability);
  }

  // 获取漏洞列表
  async findMany(
    params: VulnerabilityListParams
  ): Promise<VulnerabilityListResponse> {
    const {
      page = 1,
      limit = 10,
      search,
      severity,
      status,
      targetId,
      categoryId,
      assignedTo,
      sortBy = 'createdAt',
      sortOrder = 'desc'
    } = params;

    const skip = (page - 1) * limit;

    // 构建查询条件
    const where: Prisma.VulnerabilityWhereInput = {
      isDeleted: false,
      ...(search && {
        OR: [
          { title: { contains: search } },
          { description: { contains: search } },
          { affectedUrl: { contains: search } }
        ]
      }),
      ...(severity && severity.length > 0 && { severity: { in: severity } }),
      ...(status && status.length > 0 && { status: { in: status } }),
      ...(targetId && { targetId }),
      ...(categoryId && { categoryId }),
      ...(assignedTo && { assignedTo })
    };

    // 执行查询
    const [vulnerabilities, total] = await Promise.all([
      prisma.vulnerability.findMany({
        where,
        include: {
          target: {
            select: { id: true, name: true, projectName: true }
          },
          category: {
            select: { id: true, name: true }
          },
          template: {
            select: { id: true, name: true }
          },
          foundByUser: {
            select: { id: true, username: true, fullName: true }
          },
          assignedToUser: {
            select: { id: true, username: true, fullName: true }
          }
        },
        orderBy: { [sortBy]: sortOrder },
        skip,
        take: limit
      }),
      prisma.vulnerability.count({ where })
    ]);

    return {
      vulnerabilities: vulnerabilities.map((v) => this.toDTO(v)) as any,
      total,
      page,
      limit,
      totalPages: Math.ceil(total / limit)
    };
  }

  // 获取漏洞详情
  async findById(id: number, userId?: number): Promise<VulnerabilityDTO> {
    const vulnerability = await prisma.vulnerability.findUnique({
      where: { id, isDeleted: false },
      include: {
        target: {
          select: { id: true, name: true, projectName: true }
        },
        category: {
          select: { id: true, name: true }
        },
        template: {
          select: { id: true, name: true }
        },
        foundByUser: {
          select: { id: true, username: true, fullName: true }
        },
        assignedToUser: {
          select: { id: true, username: true, fullName: true }
        }
      }
    });

    if (!vulnerability) {
      throw new Error('漏洞不存在');
    }

    return this.toDTO(vulnerability);
  }

  // 删除漏洞（软删除）
  async delete(id: number, userId: number): Promise<boolean> {
    // 检查漏洞是否存在
    const existingVuln = await prisma.vulnerability.findUnique({
      where: { id },
      select: { id: true }
    });

    if (!existingVuln) {
      throw new Error('漏洞不存在');
    }

    // 权限验证已禁用 - 待RBAC统一实现

    await prisma.vulnerability.update({
      where: { id },
      data: { isDeleted: true }
    });

    return true;
  }

  // 获取目标选项（用于下拉选择）
  async getTargetOptions(): Promise<
    Array<{ id: number; name: string; projectName?: string }>
  > {
    const targets = await prisma.target.findMany({
      where: { isDeleted: false },
      select: { id: true, name: true, projectName: true },
      orderBy: [{ projectName: 'asc' }, { name: 'asc' }]
    });

    return targets.map((target) => ({
      id: target.id,
      name: target.projectName
        ? `${target.projectName} - ${target.name}`
        : target.name,
      projectName: target.projectName || undefined
    }));
  }

  // 获取分类选项（用于下拉选择）
  async getCategoryOptions(): Promise<
    Array<{ id: number; name: string; parentName?: string }>
  > {
    const categories = await prisma.vulnerabilityCategory.findMany({
      where: { isActive: true },
      select: {
        id: true,
        name: true,
        parentId: true,
        parent: {
          select: { name: true }
        }
      },
      orderBy: [{ level: 'asc' }, { sort: 'asc' }, { name: 'asc' }]
    });

    return categories.map((category) => ({
      id: category.id,
      name: category.name,
      parentName: category.parent?.name
    }));
  }

  // 更新漏洞状态
  async updateStatus(
    id: number,
    status: string,
    userId: number,
    changeReason?: string
  ): Promise<VulnerabilityDTO> {
    // 记录状态变更历史
    const vulnerability = await prisma.vulnerability.findUnique({
      where: { id },
      select: { status: true }
    });

    if (!vulnerability) {
      throw new Error('漏洞不存在');
    }

    const result = await prisma.$transaction([
      // 更新漏洞状态
      prisma.vulnerability.update({
        where: { id },
        data: {
          status: status as any,
          ...(status === 'CONFIRMED' && {
            confirmedAt: new Date(),
            confirmedBy: userId
          }),
          ...(status === 'FIXED' && { fixedAt: new Date() }),
          ...(status === 'VERIFIED' && {
            verifiedAt: new Date(),
            verifiedBy: userId
          })
        }
      }),
      // 记录状态变更历史
      prisma.vulnerabilityStatusHistory.create({
        data: {
          vulnerabilityId: id,
          fromStatus: vulnerability.status as any,
          toStatus: status as any,
          changedBy: userId,
          changeReason
        }
      })
    ]);

    return this.findById(id);
  }

  // 转换为 DTO
  private toDTO(vulnerability: any): VulnerabilityDTO {
    return {
      id: vulnerability.id,
      title: vulnerability.title,
      description: vulnerability.description,
      severity: vulnerability.severity as any,
      status: vulnerability.status as any,

      target: {
        id: vulnerability.target.id,
        name: vulnerability.target.name,
        projectName: vulnerability.target.projectName || undefined
      },
      category: vulnerability.category
        ? {
            id: vulnerability.category.id,
            name: vulnerability.category.name
          }
        : undefined,
      template: vulnerability.template
        ? {
            id: vulnerability.template.id,
            name: vulnerability.template.name
          }
        : undefined,
      foundByUser: {
        id: vulnerability.foundByUser.id,
        username: vulnerability.foundByUser.username,
        fullName: vulnerability.foundByUser.fullName || undefined
      },
      assignedToUser: vulnerability.assignedToUser
        ? {
            id: vulnerability.assignedToUser.id,
            username: vulnerability.assignedToUser.username,
            fullName: vulnerability.assignedToUser.fullName || undefined
          }
        : undefined,

      foundDate: vulnerability.foundDate.toISOString(),
      dueDate: vulnerability.dueDate?.toISOString(),
      confirmedAt: vulnerability.confirmedAt?.toISOString(),
      fixedAt: vulnerability.fixedAt?.toISOString(),
      verifiedAt: vulnerability.verifiedAt?.toISOString(),
      createdAt: vulnerability.createdAt.toISOString(),
      updatedAt: vulnerability.updatedAt.toISOString(),

      affectedUrl: vulnerability.affectedUrl || undefined,
      cvssScore: vulnerability.cvssScore || undefined,
      cweId: vulnerability.cweId || undefined,
      businessImpact: (vulnerability.businessImpact as any) || undefined
    };
  }
}

// 导出单例实例
export const vulnerabilityService = new VulnerabilityService();
