import { z } from 'zod';

// 枚举验证
export const VulnerabilitySeveritySchema = z.enum([
  'CRITICAL',
  'HIGH',
  'MEDIUM',
  'LOW',
  'INFO'
]);
export const VulnerabilityStatusSchema = z.enum([
  'OPEN',
  'CONFIRMED',
  'IN_PROGRESS',
  'FIXED',
  'VERIFIED',
  'REOPEN',
  'WONT_FIX',
  'FALSE_POSITIVE',
  'DUPLICATE',
  'ACCEPTED_RISK'
]);
export const BusinessImpactSchema = z.enum([
  'CRITICAL',
  'HIGH',
  'MEDIUM',
  'LOW',
  'NONE'
]);
export const DataExposureLevelSchema = z.enum([
  'SENSITIVE',
  'PII',
  'INTERNAL',
  'PUBLIC',
  'NONE'
]);
export const ExploitabilityLevelSchema = z.enum([
  'FUNCTIONAL',
  'POC',
  'THEORETICAL',
  'UNKNOWN'
]);

// 创建漏洞表单验证
export const CreateVulnerabilitySchema = z.object({
  // 基础信息 - 必填
  title: z
    .string()
    .min(1, '漏洞标题不能为空')
    .min(5, '漏洞标题至少5个字符')
    .max(500, '漏洞标题不能超过500个字符'),

  description: z
    .string()
    .min(1, '漏洞描述不能为空')
    .min(10, '漏洞描述至少10个字符')
    .max(5000, '漏洞描述不能超过5000个字符'),

  severity: VulnerabilitySeveritySchema,

  status: VulnerabilityStatusSchema.default('OPEN'),

  // 关联关系 - targetId必填
  targetId: z.number().int().positive('请选择目标'),

  categoryId: z.number().int().positive().optional(),

  templateId: z.number().int().positive().optional(), // 预留模板功能

  // 时间管理
  foundDate: z.date().optional(),
  dueDate: z.date().optional(),

  // 漏洞位置信息
  affectedModule: z
    .string()
    .max(500, '受影响模块名称不能超过500个字符')
    .optional(),

  affectedParameter: z
    .string()
    .max(500, '受影响参数不能超过500个字符')
    .optional(),

  affectedUrl: z
    .string()
    .url('请输入有效的URL格式')
    .max(1000, 'URL不能超过1000个字符')
    .optional()
    .or(z.literal('')),

  affectedEndpoint: z.string().max(500, 'API端点不能超过500个字符').optional(),

  // 复现和证明
  reproductionSteps: z
    .string()
    .max(10000, '复现步骤不能超过10000个字符')
    .optional(),

  proofOfConcept: z
    .string()
    .max(10000, 'POC代码不能超过10000个字符')
    .optional(),

  requestData: z.string().max(10000, '请求数据不能超过10000个字符').optional(),

  responseData: z.string().max(10000, '响应数据不能超过10000个字符').optional(),

  // 影响评估
  impact: z.string().max(2000, '技术影响描述不能超过2000个字符').optional(),

  businessImpact: BusinessImpactSchema.optional(),

  affectedUsers: z
    .number()
    .int()
    .min(0, '影响用户数不能为负数')
    .max(999999999, '影响用户数超出范围')
    .optional(),

  dataExposure: DataExposureLevelSchema.optional(),

  // 修复建议
  recommendation: z.string().max(5000, '修复建议不能超过5000个字符').optional(),

  workaround: z.string().max(2000, '临时解决方案不能超过2000个字符').optional(),

  references: z.string().max(2000, '参考链接不能超过2000个字符').optional(),

  // 安全评分
  cvssScore: z
    .number()
    .min(0, 'CVSS分数不能小于0')
    .max(10, 'CVSS分数不能大于10')
    .optional(),

  cvssVector: z.string().max(200, 'CVSS向量字符串不能超过200个字符').optional(),

  cvssVersion: z.string().max(10, 'CVSS版本不能超过10个字符').default('3.1'),

  exploitability: ExploitabilityLevelSchema.optional(),

  // 标准映射
  cweId: z
    .string()
    .regex(/^CWE-\d+$/, 'CWE编号格式错误，应为 CWE-123')
    .max(20, 'CWE编号不能超过20个字符')
    .optional()
    .or(z.literal('')),

  cveId: z
    .string()
    .regex(/^CVE-\d{4}-\d{4,}$/, 'CVE编号格式错误，应为 CVE-2024-1234')
    .max(30, 'CVE编号不能超过30个字符')
    .optional()
    .or(z.literal('')),

  owaspId: z.string().max(20, 'OWASP分类不能超过20个字符').optional()
});

// 更新漏洞验证（所有字段可选，除了ID）
export const UpdateVulnerabilitySchema = z
  .object({
    id: z.number().int().positive('无效的漏洞ID')
  })
  .merge(CreateVulnerabilitySchema.partial());

// 查询参数验证
export const VulnerabilityListParamsSchema = z.object({
  page: z.number().int().min(1).default(1),
  limit: z.number().int().min(1).max(100).default(10),
  search: z.string().max(100).optional(),
  severity: z.array(VulnerabilitySeveritySchema).optional(),
  status: z.array(VulnerabilityStatusSchema).optional(),
  targetId: z.number().int().positive().optional(),
  categoryId: z.number().int().positive().optional(),
  assignedTo: z.number().int().positive().optional(),
  sortBy: z
    .enum(['createdAt', 'foundDate', 'severity', 'status'])
    .default('createdAt'),
  sortOrder: z.enum(['asc', 'desc']).default('desc')
});

// 导出类型推断
export type CreateVulnerabilityInput = z.infer<
  typeof CreateVulnerabilitySchema
>;
export type UpdateVulnerabilityInput = z.infer<
  typeof UpdateVulnerabilitySchema
>;
export type VulnerabilityListParams = z.infer<
  typeof VulnerabilityListParamsSchema
>;

// 表单字段分组验证（用于分步验证）
export const BasicInfoSchema = CreateVulnerabilitySchema.pick({
  title: true,
  description: true,
  severity: true,
  status: true,
  targetId: true,
  categoryId: true,
  templateId: true,
  foundDate: true,
  dueDate: true
});

export const DetailInfoSchema = CreateVulnerabilitySchema.pick({
  affectedModule: true,
  affectedParameter: true,
  affectedUrl: true,
  affectedEndpoint: true,
  reproductionSteps: true,
  proofOfConcept: true,
  requestData: true,
  responseData: true
});

export const ImpactInfoSchema = CreateVulnerabilitySchema.pick({
  impact: true,
  businessImpact: true,
  affectedUsers: true,
  dataExposure: true,
  cvssScore: true,
  cvssVector: true,
  cvssVersion: true,
  exploitability: true
});

export const RemediationInfoSchema = CreateVulnerabilitySchema.pick({
  recommendation: true,
  workaround: true,
  references: true,
  cweId: true,
  cveId: true,
  owaspId: true
});

// 导出分组验证类型
export type BasicInfoInput = z.infer<typeof BasicInfoSchema>;
export type DetailInfoInput = z.infer<typeof DetailInfoSchema>;
export type ImpactInfoInput = z.infer<typeof ImpactInfoSchema>;
export type RemediationInfoInput = z.infer<typeof RemediationInfoSchema>;
