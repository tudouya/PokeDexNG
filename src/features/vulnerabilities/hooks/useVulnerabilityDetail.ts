import { useState, useEffect, useCallback } from 'react';
import { VulnerabilityDTO } from '../types';

interface UseVulnerabilityDetailReturn {
  data: VulnerabilityDTO | null;
  loading: boolean;
  error: string | null;
  refetch: () => void;
}

export function useVulnerabilityDetail(
  id: number
): UseVulnerabilityDetailReturn {
  const [data, setData] = useState<VulnerabilityDTO | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchVulnerability = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      const response = await fetch(`/api/vulnerabilities/${id}`);
      const result = await response.json();

      if (result.status === 'success') {
        // 扩展DTO以包含更多字段
        const extendedVulnerability: VulnerabilityDTO = {
          ...result.data,
          // 确保所有字段都有默认值
          affectedModule: result.data.affectedModule || undefined,
          affectedParameter: result.data.affectedParameter || undefined,
          affectedEndpoint: result.data.affectedEndpoint || undefined,
          reproductionSteps: result.data.reproductionSteps || undefined,
          proofOfConcept: result.data.proofOfConcept || undefined,
          requestData: result.data.requestData || undefined,
          responseData: result.data.responseData || undefined,
          impact: result.data.impact || undefined,
          affectedUsers: result.data.affectedUsers || undefined,
          dataExposure: result.data.dataExposure || undefined,
          recommendation: result.data.recommendation || undefined,
          workaround: result.data.workaround || undefined,
          references: result.data.references || undefined,
          cvssVector: result.data.cvssVector || undefined,
          cvssVersion: result.data.cvssVersion || undefined,
          exploitability: result.data.exploitability || undefined,
          cveId: result.data.cveId || undefined,
          owaspId: result.data.owaspId || undefined,
          confirmedByUser: result.data.confirmedByUser || undefined,
          verifiedByUser: result.data.verifiedByUser || undefined
        };

        setData(extendedVulnerability);
      } else {
        throw new Error(
          result.data?.message || result.message || '获取漏洞详情失败'
        );
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : '获取漏洞详情失败');
      setData(null);
    } finally {
      setLoading(false);
    }
  }, [id]);

  const refetch = () => {
    fetchVulnerability();
  };

  useEffect(() => {
    if (id) {
      fetchVulnerability();
    }
  }, [id, fetchVulnerability]);

  return {
    data,
    loading,
    error,
    refetch
  };
}
