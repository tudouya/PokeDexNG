import { z } from 'zod';
import { ROOT_CAUSES, TECHNICAL_CATEGORIES } from '../types';

// 根因分类验证
export const RootCauseSchema = z
  .enum([
    'INPUT_VALIDATION',
    'ACCESS_CONTROL',
    'INFO_DISCLOSURE',
    'CONTROL_FLOW',
    'CONFIG_MANAGEMENT'
  ])
  .optional();

// 技术分类验证
export const TechnicalCategorySchema = z
  .enum([
    'INJECTION',
    'XSS',
    'AUTHENTICATION',
    'AUTHORIZATION',
    'CRYPTO',
    'FILE_OPERATION',
    'BUSINESS_LOGIC',
    'INFORMATION_EXPOSURE'
  ])
  .optional();

// 创建分类验证模式
export const CreateCategorySchema = z.object({
  name: z
    .string()
    .min(1, '分类名称不能为空')
    .max(100, '分类名称不能超过100个字符')
    .refine((name) => name.trim().length > 0, '分类名称不能只包含空格'),
  description: z
    .string()
    .max(10000, '描述不能超过10000个字符')
    .optional()
    .or(z.literal('')),
  parentId: z.number().int().positive('父分类ID必须是正整数').optional(),
  sort: z.number().int().min(0, '排序值不能小于0').default(0),
  rootCause: z
    .string()
    .max(50, '根因分类不能超过50个字符')
    .optional()
    .or(z.literal('')),
  technicalCategory: z
    .string()
    .max(100, '技术分类不能超过100个字符')
    .optional()
    .or(z.literal('')),
  cweId: z
    .string()
    .regex(/^CWE-\d+$/, 'CWE ID格式不正确，应为CWE-数字格式')
    .max(20, 'CWE ID不能超过20个字符')
    .optional()
    .or(z.literal('')),
  owaspCategory: z
    .string()
    .max(50, 'OWASP分类不能超过50个字符')
    .optional()
    .or(z.literal('')),
  testingMethod: z
    .string()
    .max(50000, '测试方法不能超过50000个字符')
    .optional()
    .or(z.literal('')),
  remediationTemplate: z
    .string()
    .max(50000, '修复建议模板不能超过50000个字符')
    .optional()
    .or(z.literal(''))
});

// 更新分类验证模式
export const UpdateCategorySchema = CreateCategorySchema.partial().extend({
  isActive: z.boolean().optional()
});

// 查询分类验证模式
export const FindCategoriesSchema = z.object({
  page: z
    .string()
    .optional()
    .transform((val) => (val ? parseInt(val, 10) : 1))
    .refine((val) => val > 0, '页码必须大于0'),
  limit: z
    .string()
    .optional()
    .transform((val) => (val ? parseInt(val, 10) : 10))
    .refine((val) => val > 0 && val <= 100, '每页数量必须在1-100之间'),
  parentId: z
    .string()
    .optional()
    .transform((val) => {
      if (!val) return undefined; // 未提供参数 - 查询所有分类
      if (val === 'null' || val === '') return null; // 明确指定查询顶级分类
      const parsed = parseInt(val, 10);
      return isNaN(parsed) ? undefined : parsed;
    }),
  level: z
    .string()
    .optional()
    .transform((val) => (val ? parseInt(val, 10) : undefined))
    .refine(
      (val) => val === undefined || (val >= 0 && val <= 10),
      '层级必须在0-10之间'
    ),
  rootCause: z.string().optional(),
  search: z.string().optional(),
  includeInactive: z
    .string()
    .optional()
    .transform((val) => val === 'true'),
  withChildren: z
    .string()
    .optional()
    .transform((val) => val === 'true')
});

// ID参数验证
export const CategoryIdSchema = z.object({
  id: z
    .string()
    .transform((val) => parseInt(val, 10))
    .refine((val) => !isNaN(val) && val > 0, 'ID必须是正整数')
});

// 批量操作验证
export const BatchCategorySchema = z.object({
  ids: z
    .array(z.number().int().positive())
    .min(1, '至少选择一个分类')
    .max(100, '一次最多操作100个分类')
});

// 分类使用记录验证
export const CategoryUsageSchema = z.object({
  categoryId: z.number().int().positive('分类ID必须是正整数')
});

// 导入分类验证
export const ImportCategoriesSchema = z.object({
  categories: z
    .array(
      CreateCategorySchema.extend({
        id: z.number().int().positive().optional()
      })
    )
    .min(1, '导入数据不能为空')
    .max(1000, '一次最多导入1000个分类')
});

// 导出类型推断
export type CreateCategoryInput = z.infer<typeof CreateCategorySchema>;
export type UpdateCategoryInput = z.infer<typeof UpdateCategorySchema>;
export type FindCategoriesInput = z.infer<typeof FindCategoriesSchema>;
export type CategoryIdInput = z.infer<typeof CategoryIdSchema>;
export type BatchCategoryInput = z.infer<typeof BatchCategorySchema>;
export type CategoryUsageInput = z.infer<typeof CategoryUsageSchema>;
export type ImportCategoriesInput = z.infer<typeof ImportCategoriesSchema>;
