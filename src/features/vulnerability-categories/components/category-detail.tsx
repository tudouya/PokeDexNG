'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle
} from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger
} from '@/components/ui/alert-dialog';
import {
  Edit,
  Trash2,
  FolderTree,
  Hash,
  Shield,
  BookOpen,
  Clock,
  Loader2,
  ArrowUpRight,
  Copy,
  FolderPlus
} from 'lucide-react';
import { toast } from 'sonner';
import { formatDistanceToNow } from 'date-fns';
import { zhCN } from 'date-fns/locale';
import type { VulnerabilityCategoryWithChildren } from '../types';
import { useDeleteCategory } from '../hooks/useCategories';

interface CategoryDetailProps {
  category: VulnerabilityCategoryWithChildren;
}

export function CategoryDetail({ category }: CategoryDetailProps) {
  const router = useRouter();
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const { deleteCategory, deleting } = useDeleteCategory(category.id);

  // 处理编辑
  const handleEdit = () => {
    router.push(`/dashboard/vuln-categories/${category.id}/edit`);
  };

  // 处理创建子分类
  const handleCreateChild = () => {
    router.push(`/dashboard/vuln-categories/new?parentId=${category.id}`);
  };

  // 处理删除
  const handleDelete = async () => {
    try {
      const success = await deleteCategory();
      if (success) {
        toast.success('分类已删除');
        router.push('/dashboard/vuln-categories');
      }
    } catch (error: any) {
      toast.error(error.message || '删除失败');
    }
  };

  // 复制内容到剪贴板
  const copyToClipboard = async (text: string, label: string) => {
    try {
      await navigator.clipboard.writeText(text);
      toast.success(`${label} 已复制到剪贴板`);
    } catch (error) {
      toast.error('复制失败');
    }
  };

  return (
    <div className='container mx-auto space-y-6 py-6'>
      {/* 页头 */}
      <div className='flex items-start justify-between'>
        <div>
          <h1 className='flex items-center space-x-3 text-2xl font-semibold text-gray-900'>
            <FolderTree className='h-6 w-6 text-blue-600' />
            <span>{category.name}</span>
            <Badge variant={category.isActive ? 'default' : 'secondary'}>
              {category.isActive ? '启用' : '禁用'}
            </Badge>
            {category.isLeaf && <Badge variant='outline'>叶子节点</Badge>}
          </h1>
          {category.description && (
            <p className='text-muted-foreground mt-1'>{category.description}</p>
          )}
        </div>

        <div className='flex items-center space-x-2'>
          <Button variant='outline' onClick={handleEdit}>
            <Edit className='mr-2 h-4 w-4' />
            编辑
          </Button>

          {!category.isLeaf && (
            <Button variant='outline' onClick={handleCreateChild}>
              <FolderPlus className='mr-2 h-4 w-4' />
              创建子分类
            </Button>
          )}

          {category.isLeaf && (
            <AlertDialog
              open={showDeleteDialog}
              onOpenChange={setShowDeleteDialog}
            >
              <AlertDialogTrigger asChild>
                <Button variant='destructive'>
                  <Trash2 className='mr-2 h-4 w-4' />
                  删除
                </Button>
              </AlertDialogTrigger>
              <AlertDialogContent>
                <AlertDialogHeader>
                  <AlertDialogTitle>确认删除</AlertDialogTitle>
                  <AlertDialogDescription>
                    确定要删除分类 &quot;{category.name}&quot;
                    吗？此操作不可撤销。
                  </AlertDialogDescription>
                </AlertDialogHeader>
                <AlertDialogFooter>
                  <AlertDialogCancel disabled={deleting}>
                    取消
                  </AlertDialogCancel>
                  <AlertDialogAction
                    onClick={handleDelete}
                    disabled={deleting}
                    className='bg-red-600 hover:bg-red-700'
                  >
                    {deleting && (
                      <Loader2 className='mr-2 h-4 w-4 animate-spin' />
                    )}
                    删除
                  </AlertDialogAction>
                </AlertDialogFooter>
              </AlertDialogContent>
            </AlertDialog>
          )}
        </div>
      </div>

      <div className='grid grid-cols-1 gap-6 lg:grid-cols-3'>
        {/* 主要信息 */}
        <div className='space-y-6 lg:col-span-2'>
          {/* 基础信息 */}
          <Card>
            <CardHeader>
              <CardTitle className='flex items-center space-x-2'>
                <FolderTree className='h-5 w-5' />
                <span>基础信息</span>
              </CardTitle>
            </CardHeader>
            <CardContent className='space-y-4'>
              <div className='grid grid-cols-2 gap-4'>
                <div>
                  <label className='text-muted-foreground text-sm font-medium'>
                    分类ID
                  </label>
                  <p className='text-sm'>{category.id}</p>
                </div>
                <div>
                  <label className='text-muted-foreground text-sm font-medium'>
                    层级
                  </label>
                  <p className='text-sm'>L{category.level}</p>
                </div>
              </div>

              <div className='grid grid-cols-2 gap-4'>
                <div>
                  <label className='text-muted-foreground text-sm font-medium'>
                    排序值
                  </label>
                  <p className='text-sm'>{category.sort}</p>
                </div>
                <div>
                  <label className='text-muted-foreground text-sm font-medium'>
                    节点类型
                  </label>
                  <p className='text-sm'>
                    {category.isLeaf ? '叶子节点' : '分支节点'}
                  </p>
                </div>
              </div>

              {category.parent && (
                <div>
                  <label className='text-muted-foreground text-sm font-medium'>
                    父分类
                  </label>
                  <div className='mt-1 flex items-center space-x-2'>
                    <Button
                      variant='link'
                      size='sm'
                      className='h-auto p-0 text-blue-600'
                      onClick={() =>
                        router.push(
                          `/dashboard/vuln-categories/${category.parent!.id}`
                        )
                      }
                    >
                      {category.parent.name}
                      <ArrowUpRight className='ml-1 h-3 w-3' />
                    </Button>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>

          {/* 标准映射 */}
          <Card>
            <CardHeader>
              <CardTitle className='flex items-center space-x-2'>
                <Hash className='h-5 w-5' />
                <span>标准映射</span>
              </CardTitle>
              <CardDescription>与国际标准的映射关系</CardDescription>
            </CardHeader>
            <CardContent className='space-y-4'>
              <div className='grid grid-cols-2 gap-4'>
                <div>
                  <label className='text-muted-foreground text-sm font-medium'>
                    根因分类
                  </label>
                  {category.rootCause ? (
                    <Badge variant='secondary' className='mt-1'>
                      {category.rootCause}
                    </Badge>
                  ) : (
                    <p className='text-muted-foreground mt-1 text-sm'>未设置</p>
                  )}
                </div>
                <div>
                  <label className='text-muted-foreground text-sm font-medium'>
                    技术分类
                  </label>
                  {category.technicalCategory ? (
                    <Badge variant='outline' className='mt-1'>
                      {category.technicalCategory}
                    </Badge>
                  ) : (
                    <p className='text-muted-foreground mt-1 text-sm'>未设置</p>
                  )}
                </div>
              </div>

              <div className='grid grid-cols-2 gap-4'>
                <div>
                  <label className='text-muted-foreground text-sm font-medium'>
                    CWE 标识
                  </label>
                  {category.cweId ? (
                    <div className='mt-1 flex items-center space-x-2'>
                      <Badge variant='outline' className='font-mono'>
                        {category.cweId}
                      </Badge>
                      <Button
                        variant='ghost'
                        size='sm'
                        className='h-6 w-6 p-0'
                        onClick={() =>
                          copyToClipboard(category.cweId!, 'CWE ID')
                        }
                      >
                        <Copy className='h-3 w-3' />
                      </Button>
                    </div>
                  ) : (
                    <p className='text-muted-foreground mt-1 text-sm'>未设置</p>
                  )}
                </div>
                <div>
                  <label className='text-muted-foreground text-sm font-medium'>
                    OWASP 分类
                  </label>
                  {category.owaspCategory ? (
                    <div className='mt-1 flex items-center space-x-2'>
                      <Badge variant='outline'>{category.owaspCategory}</Badge>
                      <Button
                        variant='ghost'
                        size='sm'
                        className='h-6 w-6 p-0'
                        onClick={() =>
                          copyToClipboard(category.owaspCategory!, 'OWASP 分类')
                        }
                      >
                        <Copy className='h-3 w-3' />
                      </Button>
                    </div>
                  ) : (
                    <p className='text-muted-foreground mt-1 text-sm'>未设置</p>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* 知识库 */}
          {(category.testingMethod || category.remediationTemplate) && (
            <Card>
              <CardHeader>
                <CardTitle className='flex items-center space-x-2'>
                  <BookOpen className='h-5 w-5' />
                  <span>知识库</span>
                </CardTitle>
                <CardDescription>测试方法和修复建议模板</CardDescription>
              </CardHeader>
              <CardContent className='space-y-4'>
                {category.testingMethod && (
                  <div>
                    <label className='text-muted-foreground text-sm font-medium'>
                      测试方法
                    </label>
                    <div className='bg-muted mt-2 rounded-md p-3 text-sm'>
                      <pre className='whitespace-pre-wrap'>
                        {category.testingMethod}
                      </pre>
                    </div>
                  </div>
                )}

                {category.remediationTemplate && (
                  <div>
                    <label className='text-muted-foreground text-sm font-medium'>
                      修复建议模板
                    </label>
                    <div className='bg-muted mt-2 rounded-md p-3 text-sm'>
                      <pre className='whitespace-pre-wrap'>
                        {category.remediationTemplate}
                      </pre>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          )}
        </div>

        {/* 侧边栏信息 */}
        <div className='space-y-6'>
          {/* 使用统计 */}
          <Card>
            <CardHeader>
              <CardTitle className='flex items-center space-x-2'>
                <Shield className='h-5 w-5' />
                <span>使用统计</span>
              </CardTitle>
            </CardHeader>
            <CardContent className='space-y-4'>
              <div>
                <label className='text-muted-foreground text-sm font-medium'>
                  使用次数
                </label>
                <div className='mt-1 flex items-center space-x-2'>
                  <Hash className='text-muted-foreground h-4 w-4' />
                  <span className='text-2xl font-bold'>
                    {category.usageCount}
                  </span>
                </div>
              </div>

              <div>
                <label className='text-muted-foreground text-sm font-medium'>
                  最后使用
                </label>
                <div className='mt-1 flex items-center space-x-2'>
                  <Clock className='text-muted-foreground h-4 w-4' />
                  <span className='text-sm'>
                    {category.lastUsedAt
                      ? formatDistanceToNow(new Date(category.lastUsedAt), {
                          addSuffix: true,
                          locale: zhCN
                        })
                      : '从未使用'}
                  </span>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* 子分类 */}
          {category.children && category.children.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle>子分类</CardTitle>
                <CardDescription>
                  {category.children.length} 个子分类
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className='space-y-2'>
                  {category.children.slice(0, 5).map((child) => (
                    <div
                      key={child.id}
                      className='flex items-center justify-between'
                    >
                      <Button
                        variant='link'
                        size='sm'
                        className='h-auto p-0 text-sm'
                        onClick={() =>
                          router.push(`/dashboard/vuln-categories/${child.id}`)
                        }
                      >
                        {child.name}
                      </Button>
                      {child.cweId && (
                        <Badge variant='outline' className='text-xs'>
                          {child.cweId}
                        </Badge>
                      )}
                    </div>
                  ))}
                  {category.children.length > 5 && (
                    <p className='text-muted-foreground text-xs'>
                      还有 {category.children.length - 5} 个子分类...
                    </p>
                  )}
                </div>
              </CardContent>
            </Card>
          )}

          {/* 元信息 */}
          <Card>
            <CardHeader>
              <CardTitle>元信息</CardTitle>
            </CardHeader>
            <CardContent className='space-y-3'>
              <div>
                <label className='text-muted-foreground text-sm font-medium'>
                  创建时间
                </label>
                <p className='text-sm'>
                  {formatDistanceToNow(new Date(category.createdAt), {
                    addSuffix: true,
                    locale: zhCN
                  })}
                </p>
              </div>
              <div>
                <label className='text-muted-foreground text-sm font-medium'>
                  更新时间
                </label>
                <p className='text-sm'>
                  {formatDistanceToNow(new Date(category.updatedAt), {
                    addSuffix: true,
                    locale: zhCN
                  })}
                </p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
