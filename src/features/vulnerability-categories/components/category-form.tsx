'use client';

import { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle
} from '@/components/ui/card';
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage
} from '@/components/ui/form';
import { Separator } from '@/components/ui/separator';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue
} from '@/components/ui/select';
import { toast } from 'sonner';
import { useRouter } from 'next/navigation';
import {
  Loader2,
  FolderTree,
  Hash,
  Shield,
  BookOpen,
  Wrench
} from 'lucide-react';
import {
  CreateCategorySchema,
  type CreateCategoryInput
} from '../validations/category.validation';
import { useCreateCategory, useUpdateCategory } from '../hooks/useCategories';
import { CategorySelector } from './category-selector';
import type { VulnerabilityCategory } from '../types';
import { ROOT_CAUSES, TECHNICAL_CATEGORIES } from '../types';

interface CategoryFormProps {
  initialData?: VulnerabilityCategory;
  mode: 'create' | 'edit';
  parentId?: number;
}

export default function CategoryForm({
  initialData,
  mode,
  parentId
}: CategoryFormProps) {
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);

  // 使用适当的Hook
  const {
    create,
    creating,
    error: createError,
    success: createSuccess
  } = useCreateCategory();
  const {
    update,
    updating,
    error: updateError,
    success: updateSuccess
  } = useUpdateCategory(initialData?.id || 0);

  const form = useForm<CreateCategoryInput>({
    resolver: zodResolver(CreateCategorySchema),
    defaultValues: {
      name: initialData?.name || '',
      description: initialData?.description || '',
      parentId: parentId || initialData?.parentId || undefined,
      sort: initialData?.sort || 0,
      // 将空值转换为 '__none__' 以便 Select 组件正确显示
      rootCause: initialData?.rootCause || '__none__',
      technicalCategory: initialData?.technicalCategory || '__none__',
      cweId: initialData?.cweId || '',
      owaspCategory: initialData?.owaspCategory || '',
      testingMethod: initialData?.testingMethod || '',
      remediationTemplate: initialData?.remediationTemplate || ''
    }
  });

  const loading = creating || updating;
  const error = createError || updateError;
  const success = createSuccess || updateSuccess;

  // 处理表单提交
  async function onSubmit(values: CreateCategoryInput) {
    setIsSubmitting(true);

    try {
      // 将特殊值 '__none__' 转换为空字符串，以便正确保存到数据库
      const processedValues = {
        ...values,
        rootCause: values.rootCause === '__none__' ? '' : values.rootCause,
        technicalCategory:
          values.technicalCategory === '__none__'
            ? ''
            : values.technicalCategory
      };

      if (mode === 'create') {
        const result = await create(processedValues);
        if (result) {
          toast.success('分类创建成功');
          router.push('/dashboard/vuln-categories');
        }
      } else {
        const result = await update(processedValues);
        if (result) {
          toast.success('分类更新成功');
          router.push('/dashboard/vuln-categories');
        }
      }
    } catch (err: any) {
      toast.error(err.message || '操作失败');
    } finally {
      setIsSubmitting(false);
    }
  }

  // 显示错误提示
  useEffect(() => {
    if (error) {
      const message =
        error.type === 'validation'
          ? '输入数据验证失败'
          : error.type === 'network'
            ? '网络连接失败'
            : '操作失败';
      toast.error(message);
    }
  }, [error]);

  return (
    <div className='container mx-auto space-y-6 py-6'>
      {/* 页头 */}
      <div className='flex items-center justify-between'>
        <div>
          <h1 className='text-2xl font-semibold text-gray-900'>
            {mode === 'create' ? '创建分类' : '编辑分类'}
          </h1>
          <p className='text-muted-foreground mt-1 text-sm'>
            {mode === 'create'
              ? '创建新的漏洞分类，支持多层级结构和标准映射'
              : '修改分类信息，包括标准映射和知识库内容'}
          </p>
        </div>
      </div>

      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-6'>
          {/* 基础信息 */}
          <Card>
            <CardHeader className='flex flex-row items-center space-y-0 pb-4'>
              <div className='flex items-center space-x-2'>
                <FolderTree className='h-5 w-5 text-blue-600' />
                <CardTitle>基础信息</CardTitle>
              </div>
            </CardHeader>
            <CardContent className='space-y-4'>
              <div className='grid grid-cols-1 gap-4 md:grid-cols-2'>
                <FormField
                  control={form.control}
                  name='name'
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>分类名称 *</FormLabel>
                      <FormControl>
                        <Input placeholder='例如：SQL注入' {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name='parentId'
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>父分类</FormLabel>
                      <FormControl>
                        <CategorySelector
                          value={field.value || null}
                          onValueChange={field.onChange}
                          placeholder='选择父分类（可选）'
                          allowClear={true}
                          showFrequent={false}
                        />
                      </FormControl>
                      <FormDescription>
                        不选择父分类将作为顶层分类
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div className='grid grid-cols-1 gap-4 md:grid-cols-2'>
                <FormField
                  control={form.control}
                  name='sort'
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>排序</FormLabel>
                      <FormControl>
                        <Input
                          type='number'
                          min='0'
                          placeholder='0'
                          {...field}
                          onChange={(e) =>
                            field.onChange(parseInt(e.target.value) || 0)
                          }
                        />
                      </FormControl>
                      <FormDescription>数字越小排在越前面</FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <FormField
                control={form.control}
                name='description'
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>描述</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder='详细描述此分类的含义和用途...'
                        rows={3}
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </CardContent>
          </Card>

          {/* 分类映射 */}
          <Card>
            <CardHeader className='flex flex-row items-center space-y-0 pb-4'>
              <div className='flex items-center space-x-2'>
                <Hash className='h-5 w-5 text-green-600' />
                <CardTitle>分类映射</CardTitle>
              </div>
            </CardHeader>
            <CardContent className='space-y-4'>
              <div className='grid grid-cols-1 gap-4 md:grid-cols-2'>
                <FormField
                  control={form.control}
                  name='rootCause'
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>根因分类</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder='选择根因分类' />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value='__none__'>不选择</SelectItem>
                          {Object.entries(ROOT_CAUSES).map(([key, value]) => (
                            <SelectItem key={key} value={value}>
                              {value}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name='technicalCategory'
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>技术分类</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder='选择技术分类' />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value='__none__'>不选择</SelectItem>
                          {Object.entries(TECHNICAL_CATEGORIES).map(
                            ([key, value]) => (
                              <SelectItem key={key} value={value}>
                                {value}
                              </SelectItem>
                            )
                          )}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div className='grid grid-cols-1 gap-4 md:grid-cols-2'>
                <FormField
                  control={form.control}
                  name='cweId'
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>CWE ID</FormLabel>
                      <FormControl>
                        <Input placeholder='例如：CWE-89' {...field} />
                      </FormControl>
                      <FormDescription>
                        Common Weakness Enumeration 标识符
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name='owaspCategory'
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>OWASP 分类</FormLabel>
                      <FormControl>
                        <Input placeholder='例如：A03:2021' {...field} />
                      </FormControl>
                      <FormDescription>OWASP Top 10 分类标识</FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </CardContent>
          </Card>

          {/* 知识库 */}
          <Card>
            <CardHeader className='flex flex-row items-center space-y-0 pb-4'>
              <div className='flex items-center space-x-2'>
                <BookOpen className='h-5 w-5 text-purple-600' />
                <CardTitle>知识库</CardTitle>
              </div>
            </CardHeader>
            <CardContent className='space-y-4'>
              <FormField
                control={form.control}
                name='testingMethod'
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>测试方法</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder='描述测试此类漏洞的方法和步骤...'
                        rows={4}
                        {...field}
                      />
                    </FormControl>
                    <FormDescription>
                      详细描述如何测试和发现这类漏洞
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name='remediationTemplate'
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>修复建议模板</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder='提供修复此类漏洞的建议和最佳实践...'
                        rows={4}
                        {...field}
                      />
                    </FormControl>
                    <FormDescription>
                      为报告生成提供标准化的修复建议模板
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </CardContent>
          </Card>

          {/* 操作按钮 */}
          <div className='flex items-center justify-end space-x-4'>
            <Button
              type='button'
              variant='outline'
              onClick={() => router.back()}
            >
              取消
            </Button>
            <Button type='submit' disabled={loading || isSubmitting}>
              {loading && <Loader2 className='mr-2 h-4 w-4 animate-spin' />}
              {mode === 'create' ? '创建分类' : '保存修改'}
            </Button>
          </div>
        </form>
      </Form>
    </div>
  );
}
