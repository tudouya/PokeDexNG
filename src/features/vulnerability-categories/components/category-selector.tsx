'use client';

import { useState, useMemo, useCallback, useEffect } from 'react';
import { Check, ChevronsUpDown, Search, Clock, Hash } from 'lucide-react';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList
} from '@/components/ui/command';
import {
  Popover,
  PopoverContent,
  PopoverTrigger
} from '@/components/ui/popover';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import {
  useCategoryTree,
  useSearchCategories,
  useFrequentCategories,
  useCategoryUsage
} from '../hooks/useCategories';
import type { VulnerabilityCategory, CategoryTreeNode } from '../types';

interface CategorySelectorProps {
  value?: number | null;
  onValueChange: (value: number | null) => void;
  placeholder?: string;
  disabled?: boolean;
  className?: string;
  allowClear?: boolean;
  showFrequent?: boolean;
  showCWE?: boolean;
  recordUsage?: boolean;
}

interface CategoryOption {
  id: number;
  name: string;
  level: number;
  cweId?: string | null;
  owaspCategory?: string | null;
  usageCount?: number;
  isLeaf: boolean;
  fullPath: string;
}

export function CategorySelector({
  value,
  onValueChange,
  placeholder = '选择漏洞分类',
  disabled = false,
  className,
  allowClear = true,
  showFrequent = true,
  showCWE = true,
  recordUsage = true
}: CategorySelectorProps) {
  const [open, setOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');

  // 获取分类树和常用分类
  const { tree, loading: treeLoading } = useCategoryTree();
  const { categories: frequent, loading: frequentLoading } =
    useFrequentCategories(5);
  const {
    results: searchResults,
    loading: searching,
    search
  } = useSearchCategories();
  const { recordUsage: recordCategoryUsage } = useCategoryUsage();

  // 将树结构扁平化为选项列表
  const flattenTree = useCallback(
    (nodes: CategoryTreeNode[], parentPath = ''): CategoryOption[] => {
      return nodes.reduce<CategoryOption[]>((acc, node) => {
        const currentPath = parentPath
          ? `${parentPath} > ${node.name}`
          : node.name;

        const option: CategoryOption = {
          id: node.id,
          name: node.name,
          level: node.level,
          cweId: node.cweId,
          owaspCategory: node.owaspCategory,
          usageCount: node.usageCount,
          isLeaf: node.isLeaf,
          fullPath: currentPath
        };

        acc.push(option);

        if (node.children?.length > 0) {
          acc.push(...flattenTree(node.children, currentPath));
        }

        return acc;
      }, []);
    },
    []
  );

  const allOptions = useMemo(() => {
    return flattenTree(tree);
  }, [tree, flattenTree]);

  // 获取当前选中的分类
  const selectedCategory = useMemo(() => {
    if (!value) return null;
    return allOptions.find((option) => option.id === value);
  }, [value, allOptions]);

  // 处理搜索
  useEffect(() => {
    if (searchQuery.trim()) {
      const timer = setTimeout(() => {
        search(searchQuery.trim());
      }, 300);
      return () => clearTimeout(timer);
    }
  }, [searchQuery, search]);

  // 处理选择
  const handleSelect = useCallback(
    async (categoryId: number | null) => {
      onValueChange(categoryId);
      setOpen(false);

      // 记录使用
      if (recordUsage && categoryId) {
        try {
          await recordCategoryUsage(categoryId);
        } catch (error) {
          console.warn('Failed to record category usage:', error);
        }
      }
    },
    [onValueChange, recordUsage, recordCategoryUsage]
  );

  // 渲染分类项
  const renderCategoryItem = (option: CategoryOption, isSelected: boolean) => (
    <CommandItem
      key={option.id}
      value={option.id.toString()}
      onSelect={() => handleSelect(option.id)}
      className='flex items-center justify-between'
    >
      <div className='flex flex-1 items-center space-x-2'>
        <Check
          className={cn(
            'mr-2 h-4 w-4',
            isSelected ? 'opacity-100' : 'opacity-0'
          )}
        />
        <div className='flex-1'>
          <div className='flex items-center space-x-2'>
            <span
              style={{
                paddingLeft: `${option.level * 12}px`
              }}
              className='text-sm'
            >
              {option.name}
            </span>
            {showCWE && option.cweId && (
              <Badge variant='secondary' className='text-xs'>
                {option.cweId}
              </Badge>
            )}
          </div>
          {option.level > 0 && (
            <div className='text-muted-foreground mt-1 text-xs'>
              {option.fullPath}
            </div>
          )}
        </div>
      </div>
      {option.usageCount && option.usageCount > 0 && (
        <div className='text-muted-foreground flex items-center text-xs'>
          <Hash className='mr-1 h-3 w-3' />
          {option.usageCount}
        </div>
      )}
    </CommandItem>
  );

  const isLoading = treeLoading || frequentLoading || searching;

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant='outline'
          role='combobox'
          aria-expanded={open}
          disabled={disabled}
          className={cn(
            'justify-between',
            !selectedCategory && 'text-muted-foreground',
            className
          )}
        >
          <div className='flex min-w-0 flex-1 items-center space-x-2'>
            {selectedCategory ? (
              <>
                <span className='truncate'>{selectedCategory.name}</span>
                {showCWE && selectedCategory.cweId && (
                  <Badge variant='secondary' className='text-xs'>
                    {selectedCategory.cweId}
                  </Badge>
                )}
              </>
            ) : (
              <span>{placeholder}</span>
            )}
          </div>
          <ChevronsUpDown className='ml-2 h-4 w-4 shrink-0 opacity-50' />
        </Button>
      </PopoverTrigger>
      <PopoverContent className='w-[400px] p-0' align='start'>
        <Command>
          <CommandInput
            placeholder='搜索分类...'
            value={searchQuery}
            onValueChange={setSearchQuery}
            className='h-9'
          />
          <CommandList>
            {isLoading && (
              <div className='py-6 text-center text-sm'>正在加载分类...</div>
            )}

            {/* 清除选择选项 */}
            {allowClear && selectedCategory && (
              <CommandGroup>
                <CommandItem
                  onSelect={() => handleSelect(null)}
                  className='text-red-600'
                >
                  <div className='flex items-center space-x-2'>
                    <span>清除选择</span>
                  </div>
                </CommandItem>
              </CommandGroup>
            )}

            {/* 搜索结果 */}
            {searchQuery.trim() && searchResults.length > 0 && (
              <CommandGroup heading='搜索结果'>
                {searchResults.map((category) => {
                  const option: CategoryOption = {
                    id: category.id,
                    name: category.name,
                    level: category.level,
                    cweId: category.cweId,
                    owaspCategory: category.owaspCategory,
                    usageCount: category.usageCount,
                    isLeaf: category.isLeaf,
                    fullPath: category.name
                  };
                  const isSelected = value === category.id;
                  return renderCategoryItem(option, isSelected);
                })}
              </CommandGroup>
            )}

            {/* 常用分类 */}
            {!searchQuery.trim() && showFrequent && frequent.length > 0 && (
              <>
                <CommandGroup
                  heading={
                    <div className='flex items-center space-x-2'>
                      <Clock className='h-3 w-3' />
                      <span>常用分类</span>
                    </div>
                  }
                >
                  {frequent.map((category) => {
                    const option: CategoryOption = {
                      id: category.id,
                      name: category.name,
                      level: category.level,
                      cweId: category.cweId,
                      owaspCategory: category.owaspCategory,
                      usageCount: category.usageCount,
                      isLeaf: category.isLeaf,
                      fullPath: category.name
                    };
                    const isSelected = value === category.id;
                    return renderCategoryItem(option, isSelected);
                  })}
                </CommandGroup>
                <Separator />
              </>
            )}

            {/* 所有分类 */}
            {!searchQuery.trim() && allOptions.length > 0 && (
              <CommandGroup heading='所有分类'>
                {allOptions.map((option) => {
                  const isSelected = value === option.id;
                  return renderCategoryItem(option, isSelected);
                })}
              </CommandGroup>
            )}

            {/* 空状态 */}
            {!isLoading && (
              <>
                {searchQuery.trim() && searchResults.length === 0 && (
                  <CommandEmpty>
                    <div className='py-6 text-center text-sm'>
                      <Search className='mx-auto mb-2 h-4 w-4 text-gray-400' />
                      <p>未找到相关分类</p>
                      <p className='text-muted-foreground mt-1 text-xs'>
                        尝试不同的关键词
                      </p>
                    </div>
                  </CommandEmpty>
                )}

                {!searchQuery.trim() && allOptions.length === 0 && (
                  <CommandEmpty>
                    <div className='py-6 text-center text-sm'>暂无分类数据</div>
                  </CommandEmpty>
                )}
              </>
            )}
          </CommandList>
        </Command>
      </PopoverContent>
    </Popover>
  );
}
