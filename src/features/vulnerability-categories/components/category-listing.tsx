'use client';

import { useMemo } from 'react';
import { useCategories } from '../hooks/useCategories';
import { CategoryTable } from './category-tables';
import { columns } from './category-tables/columns';
import type { FindCategoriesDTO } from '../types';
import {
  useQueryState,
  parseAsInteger,
  parseAsString,
  parseAsBoolean
} from 'nuqs';

export default function CategoryListingPage() {
  // 使用nuqs管理URL状态 - 提供更好的用户体验和可分享URL
  const [page, setPage] = useQueryState('page', parseAsInteger.withDefault(1));
  const [limit, setLimit] = useQueryState(
    'limit',
    parseAsInteger.withDefault(20)
  );
  const [level, setLevel] = useQueryState(
    'level',
    parseAsInteger.withOptions({ clearOnDefault: true })
  );
  const [rootCause, setRootCause] = useQueryState(
    'rootCause',
    parseAsString.withOptions({ clearOnDefault: true })
  );
  const [search, setSearch] = useQueryState(
    'search',
    parseAsString.withOptions({ clearOnDefault: true })
  );
  const [includeInactive, setIncludeInactive] = useQueryState(
    'includeInactive',
    parseAsBoolean.withDefault(false)
  );

  // 构建过滤器对象，所有状态都从URL获取
  const filters = useMemo<FindCategoriesDTO>(
    () => ({
      page,
      limit,
      level: level || undefined,
      rootCause: rootCause || undefined,
      search: search || undefined,
      includeInactive,
      withChildren: false
    }),
    [page, limit, level, rootCause, search, includeInactive]
  );

  // 使用Hook获取数据
  const { categories, total, loading, error, refresh } = useCategories(filters);

  // 错误处理
  if (error) {
    return (
      <div className='flex h-64 items-center justify-center'>
        <div className='text-center'>
          <h3 className='mb-2 text-lg font-medium text-gray-900'>加载失败</h3>
          <p className='mb-4 text-gray-500'>
            {error.type === 'network' ? '网络连接失败' : '服务器错误'}
          </p>
          <button
            onClick={() => refresh()}
            className='rounded bg-blue-600 px-4 py-2 text-white hover:bg-blue-700'
          >
            重试
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className='space-y-4'>
      {/* 搜索和过滤组件 - 利用URL状态管理 */}
      <div className='flex flex-col space-y-2 sm:flex-row sm:space-y-0 sm:space-x-2'>
        <div className='flex-1'>
          <input
            type='text'
            placeholder='搜索分类名称、描述、CWE ID...'
            value={search || ''}
            onChange={(e) => setSearch(e.target.value || null)}
            className='border-input bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring w-full rounded-md border px-3 py-2 text-sm focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:outline-none'
          />
        </div>
        <div className='flex space-x-2'>
          <select
            value={level || ''}
            onChange={(e) =>
              setLevel(e.target.value ? parseInt(e.target.value) : null)
            }
            className='border-input bg-background ring-offset-background focus-visible:ring-ring rounded-md border px-3 py-2 text-sm focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:outline-none'
          >
            <option value=''>所有层级</option>
            <option value='0'>顶级分类 (L0)</option>
            <option value='1'>一级分类 (L1)</option>
            <option value='2'>二级分类 (L2)</option>
            <option value='3'>三级分类 (L3)</option>
          </select>
          <label className='flex items-center space-x-2'>
            <input
              type='checkbox'
              checked={includeInactive}
              onChange={(e) => setIncludeInactive(e.target.checked)}
              className='border-input bg-background text-primary focus-visible:ring-ring rounded focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:outline-none'
            />
            <span className='text-sm'>包含已禁用</span>
          </label>
        </div>
      </div>

      <CategoryTable data={categories} totalItems={total} columns={columns} />
    </div>
  );
}
