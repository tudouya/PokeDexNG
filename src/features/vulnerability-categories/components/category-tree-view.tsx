'use client';

import { useState, useMemo } from 'react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import {
  IconChevronRight,
  IconChevronDown,
  IconFolder,
  IconFolderOpen,
  IconFile,
  IconSearch,
  IconPlus,
  IconEdit,
  IconTrash,
  IconEye,
  IconFilter
} from '@tabler/icons-react';
import { cn } from '@/lib/utils';
import { useCategoryTree } from '../hooks/useCategories';
import type { CategoryTreeNode } from '../types';
import Link from 'next/link';

interface CategoryTreeNodeProps {
  node: CategoryTreeNode;
  level: number;
  isExpanded: boolean;
  onToggleExpanded: (id: number) => void;
  searchTerm: string;
  showInactive: boolean;
}

function CategoryTreeNodeComponent({
  node,
  level,
  isExpanded,
  onToggleExpanded,
  searchTerm,
  showInactive
}: CategoryTreeNodeProps) {
  const hasChildren = node.children && node.children.length > 0;
  const isVisible = showInactive || node.isActive;
  const isHighlighted =
    searchTerm && node.name.toLowerCase().includes(searchTerm.toLowerCase());

  if (!isVisible) return null;

  const paddingLeft = level * 20 + 12;

  return (
    <>
      <div
        className={cn(
          'group hover:bg-accent flex items-center gap-2 rounded-lg p-2 transition-all duration-200',
          !node.isActive && 'opacity-50',
          isHighlighted && 'bg-accent/50 ring-primary/20 ring-1'
        )}
        style={{ paddingLeft }}
      >
        {/* 展开/收起按钮 */}
        {hasChildren ? (
          <Button
            variant='ghost'
            size='sm'
            className='h-6 w-6 p-0'
            onClick={() => onToggleExpanded(node.id)}
          >
            {isExpanded ? (
              <IconChevronDown className='h-4 w-4' />
            ) : (
              <IconChevronRight className='h-4 w-4' />
            )}
          </Button>
        ) : (
          <div className='h-6 w-6' />
        )}

        {/* 图标 */}
        <div className='flex-shrink-0'>
          {hasChildren ? (
            isExpanded ? (
              <IconFolderOpen className='h-4 w-4 text-amber-600' />
            ) : (
              <IconFolder className='h-4 w-4 text-amber-600' />
            )
          ) : (
            <IconFile className='h-4 w-4 text-blue-600' />
          )}
        </div>

        {/* 分类信息 */}
        <div className='min-w-0 flex-1'>
          <div className='flex items-center gap-2'>
            <span
              className={cn(
                'truncate font-medium',
                !node.isActive && 'text-muted-foreground line-through'
              )}
            >
              {node.name}
            </span>

            {/* 层级标识 */}
            <Badge variant='outline' className='text-xs'>
              L{node.level}
            </Badge>

            {/* CWE标识 */}
            {node.cweId && (
              <Badge variant='secondary' className='text-xs'>
                {node.cweId}
              </Badge>
            )}

            {/* OWASP标识 */}
            {node.owaspCategory && (
              <Badge variant='default' className='text-xs'>
                {node.owaspCategory}
              </Badge>
            )}

            {/* 使用次数 */}
            {node.usageCount > 0 && (
              <Badge variant='destructive' className='text-xs'>
                {node.usageCount}次
              </Badge>
            )}
          </div>

          {/* 描述 */}
          {node.description && (
            <p className='text-muted-foreground mt-1 truncate text-sm'>
              {node.description}
            </p>
          )}
        </div>

        {/* 操作按钮 */}
        <div className='flex-shrink-0 opacity-0 transition-opacity group-hover:opacity-100'>
          <div className='flex items-center gap-1'>
            <Link href={`/dashboard/vuln-categories/${node.id}`}>
              <Button variant='ghost' size='sm' className='h-6 w-6 p-0'>
                <IconEye className='h-3 w-3' />
              </Button>
            </Link>
            <Link href={`/dashboard/vuln-categories/${node.id}/edit`}>
              <Button variant='ghost' size='sm' className='h-6 w-6 p-0'>
                <IconEdit className='h-3 w-3' />
              </Button>
            </Link>
            <Button
              variant='ghost'
              size='sm'
              className='text-destructive h-6 w-6 p-0'
            >
              <IconTrash className='h-3 w-3' />
            </Button>
          </div>
        </div>
      </div>

      {/* 子节点 */}
      {hasChildren && isExpanded && (
        <div className='transition-all duration-200'>
          {node.children.map((child) => (
            <CategoryTreeNodeComponent
              key={child.id}
              node={child}
              level={level + 1}
              isExpanded={isExpanded}
              onToggleExpanded={onToggleExpanded}
              searchTerm={searchTerm}
              showInactive={showInactive}
            />
          ))}
        </div>
      )}
    </>
  );
}

export default function CategoryTreeView() {
  const [expandedNodes, setExpandedNodes] = useState<Set<number>>(new Set());
  const [searchTerm, setSearchTerm] = useState('');
  const [showInactive, setShowInactive] = useState(false);
  const [showFilters, setShowFilters] = useState(false);

  const { tree, loading, error, refresh } = useCategoryTree(showInactive);

  // 过滤和搜索逻辑
  const filteredTree = useMemo(() => {
    if (!searchTerm) return tree;

    const filterTree = (nodes: CategoryTreeNode[]): CategoryTreeNode[] => {
      return nodes.reduce<CategoryTreeNode[]>((acc, node) => {
        const matchesSearch =
          node.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
          (node.description &&
            node.description
              .toLowerCase()
              .includes(searchTerm.toLowerCase())) ||
          (node.cweId &&
            node.cweId.toLowerCase().includes(searchTerm.toLowerCase()));

        const filteredChildren = filterTree(node.children || []);

        if (matchesSearch || filteredChildren.length > 0) {
          acc.push({
            ...node,
            children: filteredChildren
          });

          // 自动展开包含搜索结果的节点
          if (filteredChildren.length > 0) {
            setExpandedNodes((prev) => new Set(prev).add(node.id));
          }
        }

        return acc;
      }, []);
    };

    return filterTree(tree);
  }, [tree, searchTerm]);

  const handleToggleExpanded = (nodeId: number) => {
    setExpandedNodes((prev) => {
      const newSet = new Set(prev);
      if (newSet.has(nodeId)) {
        newSet.delete(nodeId);
      } else {
        newSet.add(nodeId);
      }
      return newSet;
    });
  };

  const handleExpandAll = () => {
    const getAllNodeIds = (nodes: CategoryTreeNode[]): number[] => {
      return nodes.reduce<number[]>((acc, node) => {
        acc.push(node.id);
        if (node.children) {
          acc.push(...getAllNodeIds(node.children));
        }
        return acc;
      }, []);
    };

    setExpandedNodes(new Set(getAllNodeIds(filteredTree)));
  };

  const handleCollapseAll = () => {
    setExpandedNodes(new Set());
  };

  if (error) {
    return (
      <div className='bg-card flex h-64 items-center justify-center rounded-lg border'>
        <div className='text-center'>
          <h3 className='mb-2 text-lg font-medium'>加载失败</h3>
          <p className='text-muted-foreground mb-4'>
            {error.type === 'network' ? '网络连接失败' : '服务器错误'}
          </p>
          <Button onClick={() => refresh()}>重试</Button>
        </div>
      </div>
    );
  }

  return (
    <div className='space-y-4'>
      {/* 顶部操作栏 */}
      <div className='flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between'>
        <div className='flex items-center gap-3'>
          <span className='text-lg font-medium'>分类树视图</span>
          {!loading && (
            <Badge variant='secondary' className='text-xs'>
              {filteredTree.length} 个分类
            </Badge>
          )}
        </div>
        <div className='flex items-center gap-2'>
          <Button
            variant='outline'
            size='sm'
            onClick={() => setShowFilters(!showFilters)}
          >
            <IconFilter className='mr-2 h-4 w-4' />
            {showFilters ? '隐藏筛选' : '显示筛选'}
          </Button>
          <Link href='/dashboard/vuln-categories/new'>
            <Button size='sm'>
              <IconPlus className='mr-2 h-4 w-4' />
              新增分类
            </Button>
          </Link>
        </div>
      </div>

      {/* 搜索和筛选栏 */}
      <div className='space-y-4'>
        {/* 搜索框 */}
        <div className='relative max-w-md'>
          <IconSearch className='text-muted-foreground absolute top-1/2 left-3 h-4 w-4 -translate-y-1/2' />
          <Input
            placeholder='搜索分类名称、描述、CWE ID...'
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className='pl-10'
          />
        </div>

        {/* 高级筛选 */}
        {showFilters && (
          <div className='bg-card rounded-lg border p-4'>
            <div className='flex flex-wrap items-center gap-4'>
              <label className='flex items-center space-x-2'>
                <input
                  type='checkbox'
                  checked={showInactive}
                  onChange={(e) => setShowInactive(e.target.checked)}
                  className='border-input rounded'
                />
                <span className='text-sm'>显示已禁用分类</span>
              </label>

              <div className='flex items-center gap-2'>
                <Button variant='outline' size='sm' onClick={handleExpandAll}>
                  全部展开
                </Button>
                <Button variant='outline' size='sm' onClick={handleCollapseAll}>
                  全部收起
                </Button>
              </div>

              {searchTerm && (
                <div className='text-muted-foreground text-sm'>
                  搜索: &ldquo;{searchTerm}&rdquo;
                </div>
              )}
            </div>
          </div>
        )}
      </div>

      {/* 树形显示区域 */}
      <div className='bg-card rounded-lg border'>
        <ScrollArea className='h-[calc(100vh-300px)] min-h-[500px]'>
          <div className='p-6'>
            {loading ? (
              <div className='flex h-32 items-center justify-center'>
                <div className='text-muted-foreground text-sm'>加载中...</div>
              </div>
            ) : filteredTree.length === 0 ? (
              <div className='flex h-32 items-center justify-center'>
                <div className='text-center'>
                  <p className='text-muted-foreground text-sm'>
                    {searchTerm ? '未找到匹配的分类' : '暂无分类数据'}
                  </p>
                </div>
              </div>
            ) : (
              <div className='space-y-1'>
                {filteredTree.map((node) => (
                  <CategoryTreeNodeComponent
                    key={node.id}
                    node={node}
                    level={0}
                    isExpanded={expandedNodes.has(node.id)}
                    onToggleExpanded={handleToggleExpanded}
                    searchTerm={searchTerm}
                    showInactive={showInactive}
                  />
                ))}
              </div>
            )}
          </div>
        </ScrollArea>
      </div>
    </div>
  );
}
