'use client';

import { Badge } from '@/components/ui/badge';
import { DataTableColumnHeader } from '@/components/ui/table/data-table-column-header';
import type { VulnerabilityCategory } from '../../types';
import { ColumnDef } from '@tanstack/react-table';
import { Folder, FileText, Hash, Clock, Shield, Bug } from 'lucide-react';
import { CellAction } from './cell-action';
import { formatDistanceToNow } from 'date-fns';
import { zhCN } from 'date-fns/locale';

// 根因分类颜色映射
const rootCauseColors = {
  输入验证缺陷: 'destructive',
  访问控制缺陷: 'default',
  信息暴露缺陷: 'secondary',
  控制流缺陷: 'default',
  配置管理缺陷: 'secondary'
} as const;

// 技术分类图标映射
const technicalCategoryIcons = {
  注入攻击: Bug,
  跨站脚本: Shield,
  身份认证: Shield,
  权限控制: Shield,
  密码学: Shield,
  文件操作: FileText,
  业务逻辑: Hash,
  信息泄露: Bug
};

export const columns: ColumnDef<VulnerabilityCategory>[] = [
  {
    accessorKey: 'name',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title='分类名称' />
    ),
    cell: ({ row }) => {
      const category = row.original;
      const Icon = category.isLeaf ? FileText : Folder;
      const isL1 = category.level === 1;
      const isL2 = category.level === 2;
      const isL3 = category.level === 3;

      return (
        <div className='flex min-w-0 items-center space-x-3'>
          {/* 层次化缩进和连接线 */}
          <div
            className='flex items-center'
            style={{ marginLeft: `${(category.level - 1) * 20}px` }}
          >
            {/* L2和L3分类的连接线指示器 */}
            {(isL2 || isL3) && (
              <div className='mr-2 flex items-center'>
                <div
                  className={`border-muted-foreground/30 h-3 w-3 border-b-2 border-l-2 ${
                    isL3 ? 'border-dashed' : 'border-solid'
                  } rounded-bl-sm`}
                />
              </div>
            )}

            <Icon
              className={`h-4 w-4 ${
                category.isLeaf
                  ? isL3
                    ? 'text-green-600'
                    : 'text-blue-600'
                  : isL1
                    ? 'text-amber-600'
                    : isL2
                      ? 'text-blue-500'
                      : 'text-slate-500'
              }`}
            />
          </div>

          <div className='min-w-0 flex-1'>
            <div
              className={`text-sm ${
                isL1
                  ? 'text-foreground font-semibold'
                  : isL2
                    ? 'text-foreground/80 font-medium'
                    : 'text-muted-foreground font-normal'
              }`}
            >
              {category.name}
            </div>
            {category.description && (
              <div className='text-muted-foreground truncate text-xs'>
                {category.description}
              </div>
            )}
          </div>
        </div>
      );
    },
    minSize: 200
  },
  {
    accessorKey: 'level',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title='层级' />
    ),
    cell: ({ row }) => {
      const level = row.getValue('level') as number;
      return (
        <Badge variant='outline' className='text-xs'>
          L{level}
        </Badge>
      );
    },
    size: 80
  },
  {
    accessorKey: 'rootCause',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title='根因分类' />
    ),
    cell: ({ row }) => {
      const rootCause = row.getValue('rootCause') as string | null;
      if (!rootCause) return <span className='text-muted-foreground'>-</span>;

      const color =
        rootCauseColors[rootCause as keyof typeof rootCauseColors] ||
        'secondary';

      return (
        <Badge variant={color} className='text-xs'>
          {rootCause}
        </Badge>
      );
    },
    size: 140
  },
  {
    accessorKey: 'technicalCategory',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title='技术分类' />
    ),
    cell: ({ row }) => {
      const technicalCategory = row.getValue('technicalCategory') as
        | string
        | null;
      if (!technicalCategory)
        return <span className='text-muted-foreground'>-</span>;

      const Icon =
        technicalCategoryIcons[
          technicalCategory as keyof typeof technicalCategoryIcons
        ];

      return (
        <div className='flex items-center space-x-2'>
          {Icon && <Icon className='h-3 w-3' />}
          <span className='text-xs'>{technicalCategory}</span>
        </div>
      );
    },
    size: 120
  },
  {
    accessorKey: 'cweId',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title='CWE' />
    ),
    cell: ({ row }) => {
      const cweId = row.getValue('cweId') as string | null;
      if (!cweId) return <span className='text-muted-foreground'>-</span>;

      return (
        <Badge variant='outline' className='font-mono text-xs'>
          {cweId}
        </Badge>
      );
    },
    size: 100
  },
  {
    accessorKey: 'owaspCategory',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title='OWASP' />
    ),
    cell: ({ row }) => {
      const owaspCategory = row.getValue('owaspCategory') as string | null;
      if (!owaspCategory)
        return <span className='text-muted-foreground'>-</span>;

      return (
        <Badge variant='outline' className='text-xs'>
          {owaspCategory}
        </Badge>
      );
    },
    size: 100
  },
  {
    accessorKey: 'usageCount',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title='使用次数' />
    ),
    cell: ({ row }) => {
      const usageCount = row.getValue('usageCount') as number;

      return (
        <div className='flex items-center space-x-2'>
          <Hash className='text-muted-foreground h-3 w-3' />
          <span className='text-sm font-medium'>{usageCount}</span>
        </div>
      );
    },
    size: 100
  },
  {
    accessorKey: 'lastUsedAt',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title='最后使用' />
    ),
    cell: ({ row }) => {
      const lastUsedAt = row.getValue('lastUsedAt') as Date | null;
      if (!lastUsedAt)
        return <span className='text-muted-foreground'>未使用</span>;

      return (
        <div className='text-muted-foreground flex items-center space-x-2 text-sm'>
          <Clock className='h-3 w-3' />
          <span>
            {formatDistanceToNow(new Date(lastUsedAt), {
              addSuffix: true,
              locale: zhCN
            })}
          </span>
        </div>
      );
    },
    size: 120
  },
  {
    accessorKey: 'isActive',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title='状态' />
    ),
    cell: ({ row }) => {
      const isActive = row.getValue('isActive') as boolean;

      return (
        <Badge variant={isActive ? 'default' : 'secondary'} className='text-xs'>
          {isActive ? '启用' : '禁用'}
        </Badge>
      );
    },
    size: 80
  },
  {
    accessorKey: 'createdAt',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title='创建时间' />
    ),
    cell: ({ row }) => {
      const createdAt = row.getValue('createdAt') as Date;

      return (
        <div className='text-muted-foreground text-sm'>
          {formatDistanceToNow(new Date(createdAt), {
            addSuffix: true,
            locale: zhCN
          })}
        </div>
      );
    },
    size: 120
  },
  {
    id: 'actions',
    header: '操作',
    cell: ({ row }) => <CellAction data={row.original} />,
    size: 100
  }
];
