'use client';

import { useCallback, useState, useMemo, useEffect } from 'react';
import { useApiData } from '@/hooks/useApiData';
import type {
  VulnerabilityCategory,
  VulnerabilityCategoryWithChildren,
  CreateCategoryDTO,
  UpdateCategoryDTO,
  FindCategoriesDTO,
  PaginatedCategories,
  CategoryStats,
  CategoryTreeNode
} from '../types';

// 将扁平数据转换为层次化排序
function transformToHierarchicalOrder(
  categories: VulnerabilityCategory[]
): VulnerabilityCategory[] {
  const categoryMap = new Map<number, VulnerabilityCategory>();
  const rootCategories: VulnerabilityCategory[] = [];
  const result: VulnerabilityCategory[] = [];

  // 构建映射和根分类列表
  categories.forEach((cat) => {
    categoryMap.set(cat.id, cat);
    if (!cat.parentId) {
      rootCategories.push(cat);
    }
  });

  // 递归函数：添加分类及其子分类
  const addCategoryAndChildren = (category: VulnerabilityCategory) => {
    result.push(category);

    // 查找并添加子分类
    const children = categories
      .filter((c) => c.parentId === category.id)
      .sort((a, b) => a.sort - b.sort || a.id - b.id);

    children.forEach((child) => addCategoryAndChildren(child));
  };

  // 处理根分类
  rootCategories
    .sort((a, b) => a.sort - b.sort || a.id - b.id)
    .forEach(addCategoryAndChildren);

  return result;
}

// 分类列表Hook
export function useCategories(initialParams?: FindCategoriesDTO) {
  const [currentParams, setCurrentParams] = useState<
    FindCategoriesDTO | undefined
  >(initialParams);

  // 为了进行层次化排序，我们需要获取所有数据而不分页
  const allDataQueryString = useMemo(() => {
    const params = {
      page: '1',
      limit: '999', // 获取足够多的数据
      ...(currentParams?.parentId !== undefined && {
        parentId: currentParams.parentId?.toString() || 'null'
      }),
      ...(currentParams?.level !== undefined && {
        level: currentParams.level.toString()
      }),
      ...(currentParams?.rootCause && {
        rootCause: currentParams.rootCause
      }),
      ...(currentParams?.search && { search: currentParams.search }),
      ...(currentParams?.includeInactive && { includeInactive: 'true' }),
      ...(currentParams?.withChildren && { withChildren: 'true' })
    };

    const filteredEntries = Object.entries(params).filter(
      ([_, value]) => value !== undefined
    );
    return '?' + new URLSearchParams(filteredEntries).toString();
  }, [currentParams]);

  const {
    data: allData,
    loading,
    error,
    execute,
    refetch
  } = useApiData<PaginatedCategories>(
    `/api/vulnerability-categories${allDataQueryString}`,
    {
      immediate: true
    }
  );

  // 处理数据：层次化排序 + 客户端分页
  const processedData = useMemo(() => {
    if (!allData?.data || !currentParams) {
      return {
        categories: [],
        total: 0,
        page: 1,
        limit: 10,
        totalPages: 0
      };
    }

    // 层次化排序
    const hierarchicalData = transformToHierarchicalOrder(allData.data);

    // 客户端分页
    const { page = 1, limit = 10 } = currentParams;
    const skip = (page - 1) * limit;
    const paginatedCategories = hierarchicalData.slice(skip, skip + limit);

    return {
      categories: paginatedCategories,
      total: hierarchicalData.length,
      page,
      limit,
      totalPages: Math.ceil(hierarchicalData.length / limit)
    };
  }, [allData, currentParams]);

  const refresh = useCallback(
    async (newParams?: FindCategoriesDTO) => {
      if (newParams) {
        setCurrentParams(newParams);
      }
      return await execute();
    },
    [execute]
  );

  // 同步外部参数变化
  useEffect(() => {
    if (initialParams) {
      setCurrentParams(initialParams);
    }
  }, [initialParams]);

  return {
    categories: processedData.categories,
    total: processedData.total,
    page: processedData.page,
    limit: processedData.limit,
    totalPages: processedData.totalPages,
    loading,
    error,
    refresh,
    refetch
  };
}

// 分类树Hook
export function useCategoryTree(includeInactive = false) {
  const queryString = includeInactive
    ? '?tree=true&includeInactive=true'
    : '?tree=true';

  const { data, loading, error, execute, refetch } = useApiData<
    CategoryTreeNode[]
  >(`/api/vulnerability-categories${queryString}`, { immediate: true });

  return {
    tree: data || [],
    loading,
    error,
    refresh: refetch,
    refetch
  };
}

// 单个分类Hook
export function useCategory(id: number, withChildren = false) {
  const queryString = withChildren ? '?withChildren=true' : '';

  const { data, loading, error, execute, refetch } = useApiData<
    VulnerabilityCategoryWithChildren | VulnerabilityCategory
  >(`/api/vulnerability-categories/${id}${queryString}`, { immediate: !!id });

  return {
    category: data,
    loading,
    error,
    refresh: refetch,
    refetch
  };
}

// 创建分类Hook
export function useCreateCategory() {
  const [success, setSuccess] = useState(false);
  const { loading, error, execute } = useApiData<
    VulnerabilityCategory,
    CreateCategoryDTO
  >('/api/vulnerability-categories', { method: 'POST' });

  const create = useCallback(
    async (data: CreateCategoryDTO): Promise<VulnerabilityCategory | null> => {
      setSuccess(false);
      const result = await execute(data);

      if (result) {
        setSuccess(true);
        // 3秒后清除成功状态
        setTimeout(() => setSuccess(false), 3000);
      }

      return result;
    },
    [execute]
  );

  const reset = useCallback(() => {
    setSuccess(false);
  }, []);

  return {
    create,
    creating: loading,
    error,
    success,
    reset
  };
}

// 更新分类Hook
export function useUpdateCategory(id: number) {
  const [success, setSuccess] = useState(false);
  const { loading, error, execute } = useApiData<
    VulnerabilityCategory,
    UpdateCategoryDTO
  >(`/api/vulnerability-categories/${id}`, { method: 'PUT' });

  const update = useCallback(
    async (data: UpdateCategoryDTO): Promise<VulnerabilityCategory | null> => {
      setSuccess(false);
      const result = await execute(data);

      if (result) {
        setSuccess(true);
        setTimeout(() => setSuccess(false), 3000);
      }

      return result;
    },
    [execute]
  );

  const reset = useCallback(() => {
    setSuccess(false);
  }, []);

  return {
    update,
    updating: loading,
    error,
    success,
    reset
  };
}

// 删除分类Hook
export function useDeleteCategory(id: number) {
  const [success, setSuccess] = useState(false);
  const { loading, error, execute } = useApiData<{
    message: string;
    category: VulnerabilityCategory;
  }>(`/api/vulnerability-categories/${id}`, { method: 'DELETE' });

  const deleteCategory = useCallback(async (): Promise<boolean> => {
    setSuccess(false);
    const result = await execute();

    if (result) {
      setSuccess(true);
      setTimeout(() => setSuccess(false), 3000);
      return true;
    }

    return false;
  }, [execute]);

  const reset = useCallback(() => {
    setSuccess(false);
  }, []);

  return {
    deleteCategory,
    deleting: loading,
    error,
    success,
    reset
  };
}

// 搜索分类Hook
export function useSearchCategories() {
  const [query, setQuery] = useState('');
  const [limit, setLimit] = useState(20);

  const queryString = useMemo(() => {
    if (!query.trim()) return '';
    const params = new URLSearchParams({
      q: query.trim(),
      limit: limit.toString()
    });
    return '?' + params.toString();
  }, [query, limit]);

  const { data, loading, error, execute } = useApiData<VulnerabilityCategory[]>(
    queryString ? `/api/vulnerability-categories/search${queryString}` : '',
    { immediate: false }
  );

  const search = useCallback(
    (searchQuery: string, searchLimit?: number) => {
      setQuery(searchQuery);
      if (searchLimit) setLimit(searchLimit);
      if (searchQuery.trim()) {
        return execute();
      }
      return Promise.resolve(null);
    },
    [execute]
  );

  const clear = useCallback(() => {
    setQuery('');
  }, []);

  return {
    results: data || [],
    loading,
    error,
    search,
    clear,
    query
  };
}

// 常用分类Hook
export function useFrequentCategories(limit = 10) {
  const queryString = `?limit=${limit}`;

  const { data, loading, error, refetch } = useApiData<VulnerabilityCategory[]>(
    `/api/vulnerability-categories/frequent${queryString}`,
    { immediate: true }
  );

  return {
    categories: data || [],
    loading,
    error,
    refresh: refetch
  };
}

// 分类统计Hook
export function useCategoryStats() {
  const { data, loading, error, refetch } = useApiData<CategoryStats>(
    '/api/vulnerability-categories/stats',
    { immediate: true }
  );

  return {
    stats: data,
    loading,
    error,
    refresh: refetch
  };
}

// 记录分类使用Hook
export function useCategoryUsage() {
  const { loading, error, execute } = useApiData<{
    message: string;
    categoryId: number;
  }>('', { method: 'POST' });

  const recordUsage = useCallback(
    async (categoryId: number): Promise<boolean> => {
      // 临时创建一个专用的 API 调用
      try {
        const response = await fetch(
          `/api/vulnerability-categories/${categoryId}/use`,
          {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          }
        );
        return response.ok;
      } catch (error) {
        return false;
      }
    },
    []
  );

  return {
    recordUsage,
    recording: loading,
    error
  };
}
