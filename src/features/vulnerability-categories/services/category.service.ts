import { prisma } from '@/lib/db';
import type {
  VulnerabilityCategory,
  VulnerabilityCategoryWithChildren,
  CreateCategoryDTO,
  UpdateCategoryDTO,
  FindCategoriesDTO,
  PaginatedCategories,
  CategoryStats,
  CategoryTreeNode
} from '../types';
import type { Prisma } from '@prisma/client';

export class VulnerabilityCategoryService {
  // 创建分类
  async create(data: CreateCategoryDTO): Promise<VulnerabilityCategory> {
    // 如果有父分类，验证父分类存在
    if (data.parentId) {
      const parent = await this.findOne(data.parentId);
      if (!parent) {
        throw new Error('父分类不存在');
      }
    }

    // 检查同名分类（同一父分类下不能有重名）
    const existingCategory = await prisma.vulnerabilityCategory.findFirst({
      where: {
        name: data.name,
        parentId: data.parentId || null,
        isActive: true
      }
    });

    if (existingCategory) {
      throw new Error('同一层级下已存在相同名称的分类');
    }

    // 计算层级
    let level = 0;
    if (data.parentId) {
      const parent = await this.findOne(data.parentId);
      level = parent ? parent.level + 1 : 1;
    }

    const category = await prisma.vulnerabilityCategory.create({
      data: {
        name: data.name,
        description: data.description || null,
        parentId: data.parentId || null,
        level,
        sort: data.sort || 0,
        isLeaf: true, // 新创建的分类默认为叶子节点
        rootCause: data.rootCause || null,
        technicalCategory: data.technicalCategory || null,
        cweId: data.cweId || null,
        owaspCategory: data.owaspCategory || null,
        testingMethod: data.testingMethod || null,
        remediationTemplate: data.remediationTemplate || null
      }
    });

    // 如果有父分类，将父分类的isLeaf设为false
    if (data.parentId) {
      await prisma.vulnerabilityCategory.update({
        where: { id: data.parentId },
        data: { isLeaf: false }
      });
    }

    return category;
  }

  // 查询分类列表（分页）
  async findAll(params: FindCategoriesDTO): Promise<PaginatedCategories> {
    const {
      page = 1,
      limit = 10,
      parentId,
      level,
      rootCause,
      search,
      includeInactive = false,
      withChildren = false
    } = params;

    const skip = (page - 1) * limit;

    // 构建查询条件
    const where: Prisma.VulnerabilityCategoryWhereInput = {
      isActive: includeInactive ? undefined : true
    };

    // parentId查询（null表示查询顶层分类）
    if (parentId !== undefined) {
      where.parentId = parentId;
    }

    if (level !== undefined) {
      where.level = level;
    }

    if (rootCause) {
      where.rootCause = { contains: rootCause };
    }

    if (search) {
      where.OR = [
        { name: { contains: search } },
        { description: { contains: search } },
        { cweId: { contains: search } },
        { owaspCategory: { contains: search } }
      ];
    }

    // 执行查询
    const [categories, total] = await Promise.all([
      prisma.vulnerabilityCategory.findMany({
        where,
        skip,
        take: limit,
        orderBy: [{ level: 'asc' }, { sort: 'asc' }, { id: 'asc' }],
        include: withChildren
          ? {
              children: {
                where: { isActive: true },
                orderBy: [{ sort: 'asc' }, { id: 'asc' }]
              }
            }
          : undefined
      }),
      prisma.vulnerabilityCategory.count({ where })
    ]);

    return {
      data: categories,
      total,
      page,
      limit,
      totalPages: Math.ceil(total / limit)
    };
  }

  // 获取所有分类（用于前端层次化排序）
  async findAllForHierarchy(
    params: Omit<FindCategoriesDTO, 'page' | 'limit'>
  ): Promise<VulnerabilityCategory[]> {
    // 构建查询条件
    const where: Prisma.VulnerabilityCategoryWhereInput = {
      isActive: params.includeInactive ? undefined : true
    };

    // parentId查询（null表示查询顶层分类）
    if (params.parentId !== undefined) {
      where.parentId = params.parentId;
    }

    if (params.level !== undefined) {
      where.level = params.level;
    }

    if (params.rootCause) {
      where.rootCause = { contains: params.rootCause };
    }

    if (params.search) {
      where.OR = [
        { name: { contains: params.search } },
        { description: { contains: params.search } },
        { cweId: { contains: params.search } },
        { owaspCategory: { contains: params.search } }
      ];
    }

    return await prisma.vulnerabilityCategory.findMany({
      where,
      orderBy: [{ level: 'asc' }, { sort: 'asc' }, { id: 'asc' }],
      include: params.withChildren
        ? {
            children: {
              where: { isActive: true },
              orderBy: [{ sort: 'asc' }, { id: 'asc' }]
            }
          }
        : undefined
    });
  }

  // 获取分类树结构 (优化版本 - 使用单一查询和高效树构建)
  async getCategoryTree(includeInactive = false): Promise<CategoryTreeNode[]> {
    // 使用单一查询获取所有分类数据，按层级和排序优化查询
    const categories = await prisma.vulnerabilityCategory.findMany({
      where: {
        isActive: includeInactive ? undefined : true
      },
      select: {
        id: true,
        name: true,
        description: true,
        parentId: true,
        level: true,
        sort: true,
        isActive: true,
        isLeaf: true,
        cweId: true,
        owaspCategory: true,
        usageCount: true
      },
      orderBy: [{ level: 'asc' }, { sort: 'asc' }, { id: 'asc' }]
    });

    // 优化的树构建算法 - 创建Map存储节点引用
    const categoryMap = new Map<number, CategoryTreeNode>();
    const rootNodes: CategoryTreeNode[] = [];

    // 一次遍历创建所有节点（更高效的对象创建）
    for (const cat of categories) {
      const node: CategoryTreeNode = {
        id: cat.id,
        name: cat.name,
        description: cat.description,
        level: cat.level,
        sort: cat.sort,
        isActive: cat.isActive,
        isLeaf: cat.isLeaf,
        cweId: cat.cweId,
        owaspCategory: cat.owaspCategory,
        usageCount: cat.usageCount,
        children: []
      };
      categoryMap.set(cat.id, node);
    }

    // 建立父子关系（利用已排序的数据，子节点总是在父节点之后）
    for (const cat of categories) {
      const node = categoryMap.get(cat.id)!;
      if (cat.parentId) {
        const parent = categoryMap.get(cat.parentId);
        if (parent) {
          parent.children.push(node);
        }
      } else {
        rootNodes.push(node);
      }
    }

    return rootNodes;
  }

  // 查询单个分类
  async findOne(
    id: number,
    includeInactive = false
  ): Promise<VulnerabilityCategory | null> {
    const category = await prisma.vulnerabilityCategory.findFirst({
      where: {
        id,
        isActive: includeInactive ? undefined : true
      }
    });

    return category;
  }

  // 获取分类及其子分类
  async findWithChildren(
    id: number
  ): Promise<VulnerabilityCategoryWithChildren | null> {
    const category = await prisma.vulnerabilityCategory.findFirst({
      where: { id, isActive: true },
      include: {
        parent: true,
        children: {
          where: { isActive: true },
          orderBy: [{ sort: 'asc' }, { id: 'asc' }]
        }
      }
    });

    return category;
  }

  // 更新分类
  async update(
    id: number,
    data: UpdateCategoryDTO
  ): Promise<VulnerabilityCategory | null> {
    const existingCategory = await this.findOne(id);
    if (!existingCategory) {
      return null;
    }

    // 如果修改了父分类，进行验证
    if (
      data.parentId !== undefined &&
      data.parentId !== existingCategory.parentId
    ) {
      // 检查不能将分类设为自己的子分类
      if (data.parentId === id) {
        throw new Error('分类不能设为自己的子分类');
      }

      // 如果有新的父分类，验证父分类存在且不会形成循环引用
      if (data.parentId) {
        const parent = await this.findOne(data.parentId);
        if (!parent) {
          throw new Error('父分类不存在');
        }

        // 检查循环引用
        const isDescendant = await this.isDescendantOf(data.parentId, id);
        if (isDescendant) {
          throw new Error('不能将分类移动到其子分类下');
        }
      }
    }

    // 检查同名分类
    if (data.name && data.name !== existingCategory.name) {
      const existingSibling = await prisma.vulnerabilityCategory.findFirst({
        where: {
          name: data.name,
          parentId:
            data.parentId !== undefined
              ? data.parentId
              : existingCategory.parentId,
          isActive: true,
          id: { not: id }
        }
      });

      if (existingSibling) {
        throw new Error('同一层级下已存在相同名称的分类');
      }
    }

    // 计算新的层级
    let level = existingCategory.level;
    if (
      data.parentId !== undefined &&
      data.parentId !== existingCategory.parentId
    ) {
      if (data.parentId) {
        const parent = await this.findOne(data.parentId);
        level = parent ? parent.level + 1 : 1;
      } else {
        level = 0;
      }
    }

    const updatedCategory = await prisma.vulnerabilityCategory.update({
      where: { id },
      data: {
        ...(data.name !== undefined && { name: data.name }),
        ...(data.description !== undefined && {
          description: data.description === '' ? null : data.description
        }),
        ...(data.parentId !== undefined && { parentId: data.parentId }),
        ...(data.sort !== undefined && { sort: data.sort }),
        ...(data.isActive !== undefined && { isActive: data.isActive }),
        ...(data.rootCause !== undefined && {
          rootCause: data.rootCause === '' ? null : data.rootCause
        }),
        ...(data.technicalCategory !== undefined && {
          technicalCategory:
            data.technicalCategory === '' ? null : data.technicalCategory
        }),
        ...(data.cweId !== undefined && {
          cweId: data.cweId === '' ? null : data.cweId
        }),
        ...(data.owaspCategory !== undefined && {
          owaspCategory: data.owaspCategory === '' ? null : data.owaspCategory
        }),
        ...(data.testingMethod !== undefined && {
          testingMethod: data.testingMethod === '' ? null : data.testingMethod
        }),
        ...(data.remediationTemplate !== undefined && {
          remediationTemplate:
            data.remediationTemplate === '' ? null : data.remediationTemplate
        }),
        level,
        updatedAt: new Date()
      }
    });

    // 如果修改了父分类关系，需要更新相关分类的isLeaf状态
    if (
      data.parentId !== undefined &&
      data.parentId !== existingCategory.parentId
    ) {
      // 更新新父分类的isLeaf状态
      if (data.parentId) {
        await prisma.vulnerabilityCategory.update({
          where: { id: data.parentId },
          data: { isLeaf: false }
        });
      }

      // 检查原父分类是否还有其他子分类
      if (existingCategory.parentId) {
        const siblingCount = await prisma.vulnerabilityCategory.count({
          where: {
            parentId: existingCategory.parentId,
            id: { not: id },
            isActive: true
          }
        });

        if (siblingCount === 0) {
          await prisma.vulnerabilityCategory.update({
            where: { id: existingCategory.parentId },
            data: { isLeaf: true }
          });
        }
      }
    }

    return updatedCategory;
  }

  // 软删除分类
  async softDelete(id: number): Promise<VulnerabilityCategory | null> {
    const category = await this.findOne(id);
    if (!category) {
      return null;
    }

    // 检查是否有子分类
    const childrenCount = await prisma.vulnerabilityCategory.count({
      where: {
        parentId: id,
        isActive: true
      }
    });

    if (childrenCount > 0) {
      throw new Error('存在子分类时无法删除，请先删除或移动子分类');
    }

    const deletedCategory = await prisma.vulnerabilityCategory.update({
      where: { id },
      data: { isActive: false }
    });

    // 检查父分类是否还有其他活跃子分类
    if (category.parentId) {
      const activeSiblings = await prisma.vulnerabilityCategory.count({
        where: {
          parentId: category.parentId,
          isActive: true
        }
      });

      if (activeSiblings === 0) {
        await prisma.vulnerabilityCategory.update({
          where: { id: category.parentId },
          data: { isLeaf: true }
        });
      }
    }

    return deletedCategory;
  }

  // 恢复删除的分类
  async restore(id: number): Promise<VulnerabilityCategory | null> {
    const category = await prisma.vulnerabilityCategory.findFirst({
      where: { id, isActive: false }
    });
    if (!category) {
      return null;
    }

    const restoredCategory = await prisma.vulnerabilityCategory.update({
      where: { id },
      data: { isActive: true }
    });

    // 如果有父分类，将父分类的isLeaf设为false
    if (category.parentId) {
      await prisma.vulnerabilityCategory.update({
        where: { id: category.parentId },
        data: { isLeaf: false }
      });
    }

    return restoredCategory;
  }

  // 记录分类使用
  async recordUsage(id: number): Promise<void> {
    await prisma.vulnerabilityCategory.update({
      where: { id },
      data: {
        usageCount: { increment: 1 },
        lastUsedAt: new Date()
      }
    });
  }

  // 获取常用分类
  async getFrequentCategories(
    limit: number = 10
  ): Promise<VulnerabilityCategory[]> {
    return await prisma.vulnerabilityCategory.findMany({
      where: {
        isActive: true,
        usageCount: { gt: 0 }
      },
      orderBy: [{ usageCount: 'desc' }, { lastUsedAt: 'desc' }],
      take: limit
    });
  }

  // 获取分类统计信息
  async getStats(): Promise<CategoryStats> {
    const [total, levelGroups, rootCauseGroups, withCWE, mostUsed] =
      await Promise.all([
        prisma.vulnerabilityCategory.count({
          where: { isActive: true }
        }),
        prisma.vulnerabilityCategory.groupBy({
          by: ['level'],
          where: { isActive: true },
          _count: { level: true }
        }),
        prisma.vulnerabilityCategory.groupBy({
          by: ['rootCause'],
          where: {
            isActive: true,
            rootCause: { not: null }
          },
          _count: { rootCause: true }
        }),
        prisma.vulnerabilityCategory.count({
          where: {
            isActive: true,
            cweId: { not: null }
          }
        }),
        prisma.vulnerabilityCategory.findMany({
          where: {
            isActive: true,
            usageCount: { gt: 0 }
          },
          select: {
            id: true,
            name: true,
            usageCount: true
          },
          orderBy: { usageCount: 'desc' },
          take: 10
        })
      ]);

    const byLevel = levelGroups.reduce(
      (acc, group) => {
        acc[group.level] = group._count.level;
        return acc;
      },
      {} as Record<number, number>
    );

    const byRootCause = rootCauseGroups.reduce(
      (acc, group) => {
        if (group.rootCause) {
          acc[group.rootCause] = group._count.rootCause;
        }
        return acc;
      },
      {} as Record<string, number>
    );

    return {
      total,
      byLevel,
      byRootCause,
      withCWE,
      mostUsed
    };
  }

  // 检查分类名称是否存在（同一父分类下）
  async checkNameExists(
    name: string,
    parentId: number | null,
    excludeId?: number
  ): Promise<boolean> {
    const existingCategory = await prisma.vulnerabilityCategory.findFirst({
      where: {
        name,
        parentId,
        isActive: true,
        ...(excludeId && { id: { not: excludeId } })
      }
    });

    return !!existingCategory;
  }

  // 检查是否为子分类（优化版本 - 使用递归CTE避免多次数据库调用）
  private async isDescendantOf(
    ancestorId: number,
    descendantId: number
  ): Promise<boolean> {
    // 使用递归CTE一次性获取整个祖先链，避免多次数据库调用
    const result = await prisma.$queryRaw<Array<{ ancestor_id: number }>>`
      WITH RECURSIVE ancestor_chain AS (
        -- 基础情况：从目标节点开始
        SELECT id, parent_id, parent_id as ancestor_id
        FROM vulnerability_categories 
        WHERE id = ${descendantId} AND parent_id IS NOT NULL
        
        UNION ALL
        
        -- 递归情况：向上遍历祖先节点
        SELECT vc.id, vc.parent_id, vc.parent_id as ancestor_id
        FROM vulnerability_categories vc
        INNER JOIN ancestor_chain ac ON vc.id = ac.ancestor_id
        WHERE vc.parent_id IS NOT NULL
      )
      SELECT ancestor_id FROM ancestor_chain WHERE ancestor_id = ${ancestorId}
      LIMIT 1
    `;

    return result.length > 0;
  }

  // 搜索分类
  async search(
    query: string,
    limit: number = 20
  ): Promise<VulnerabilityCategory[]> {
    return await prisma.vulnerabilityCategory.findMany({
      where: {
        isActive: true,
        OR: [
          { name: { contains: query } },
          { description: { contains: query } },
          { cweId: { contains: query } },
          { owaspCategory: { contains: query } },
          { technicalCategory: { contains: query } }
        ]
      },
      orderBy: [{ usageCount: 'desc' }, { level: 'asc' }, { sort: 'asc' }],
      take: limit
    });
  }
}

// 导出单例实例
export const vulnerabilityCategoryService = new VulnerabilityCategoryService();
