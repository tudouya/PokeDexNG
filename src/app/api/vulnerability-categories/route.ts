import { type NextRequest } from 'next/server';
import { vulnerabilityCategoryService } from '@/features/vulnerability-categories';
import {
  CreateCategorySchema,
  FindCategoriesSchema
} from '@/features/vulnerability-categories/validations/category.validation';
import {
  withAuthApiHandler,
  createSuccessResponse,
  validateAndSanitize,
  NotFoundError
} from '@/lib/services/shared.utils';

// GET /api/vulnerability-categories - 获取分类列表
export const GET = withAuthApiHandler(async (request) => {
  const { searchParams } = new URL(request.url);

  // 检查是否请求树形结构
  const isTree = searchParams.get('tree') === 'true';

  if (isTree) {
    // 返回树形结构
    const includeInactive = searchParams.get('includeInactive') === 'true';
    const tree =
      await vulnerabilityCategoryService.getCategoryTree(includeInactive);
    return createSuccessResponse(tree);
  }

  // 将 URLSearchParams 转换为普通对象
  const params: Record<string, string> = {};
  searchParams.forEach((value, key) => {
    params[key] = value;
  });

  // 验证查询参数
  const validatedParams = FindCategoriesSchema.parse(params);

  // 查询分类列表
  const result = await vulnerabilityCategoryService.findAll(validatedParams);

  return createSuccessResponse(result);
});

// POST /api/vulnerability-categories - 创建新分类
export const POST = withAuthApiHandler(async (request) => {
  // 验证和消毒请求数据
  const validatedData = await validateAndSanitize(
    request,
    CreateCategorySchema
  );

  // 检查分类名称是否重复（在同一父分类下）
  const nameExists = await vulnerabilityCategoryService.checkNameExists(
    validatedData.name,
    validatedData.parentId || null
  );

  if (nameExists) {
    throw new Error('同一层级下已存在相同名称的分类');
  }

  // 创建分类
  const category = await vulnerabilityCategoryService.create(validatedData);

  return createSuccessResponse(category);
});
