// NextRequest imported but not used in this file
import { vulnerabilityCategoryService } from '@/features/vulnerability-categories';
import {
  UpdateCategorySchema,
  CategoryIdSchema
} from '@/features/vulnerability-categories/validations/category.validation';
import {
  withAuthApiHandler,
  createSuccessResponse,
  validateAndSanitize,
  NotFoundError
} from '@/lib/services/shared.utils';

// GET /api/vulnerability-categories/[id] - 获取单个分类
export const GET = withAuthApiHandler(
  async (request, user, { params }: { params: Promise<{ id: string }> }) => {
    // Next.js 15: await params before use
    const { id: paramId } = await params;
    // 验证ID参数
    const { id } = CategoryIdSchema.parse({ id: paramId });

    // 检查是否需要包含子分类
    const { searchParams } = new URL(request.url);
    const withChildren = searchParams.get('withChildren') === 'true';

    let category;
    if (withChildren) {
      category = await vulnerabilityCategoryService.findWithChildren(id);
    } else {
      category = await vulnerabilityCategoryService.findOne(id);
    }

    if (!category) {
      throw new NotFoundError('分类');
    }

    return createSuccessResponse(category);
  }
);

// PUT /api/vulnerability-categories/[id] - 更新分类
export const PUT = withAuthApiHandler(
  async (request, user, { params }: { params: Promise<{ id: string }> }) => {
    // Next.js 15: await params before use
    const { id: paramId } = await params;
    // 验证ID参数
    const { id } = CategoryIdSchema.parse({ id: paramId });

    // 验证和消毒请求数据
    const validatedData = await validateAndSanitize(
      request,
      UpdateCategorySchema
    );

    // 检查分类名称是否重复（如果修改了名称）
    if (validatedData.name) {
      const parentId =
        validatedData.parentId !== undefined
          ? validatedData.parentId
          : (await vulnerabilityCategoryService.findOne(id))?.parentId || null;

      const nameExists = await vulnerabilityCategoryService.checkNameExists(
        validatedData.name,
        parentId,
        id // 排除当前分类
      );

      if (nameExists) {
        throw new Error('同一层级下已存在相同名称的分类');
      }
    }

    // 更新分类
    const category = await vulnerabilityCategoryService.update(
      id,
      validatedData
    );

    if (!category) {
      throw new NotFoundError('分类');
    }

    return createSuccessResponse(category);
  }
);

// DELETE /api/vulnerability-categories/[id] - 软删除分类
export const DELETE = withAuthApiHandler(
  async (request, user, { params }: { params: Promise<{ id: string }> }) => {
    // Next.js 15: await params before use
    const { id: paramId } = await params;
    // 验证ID参数
    const { id } = CategoryIdSchema.parse({ id: paramId });

    // 软删除分类
    const category = await vulnerabilityCategoryService.softDelete(id);

    if (!category) {
      throw new NotFoundError('分类');
    }

    return createSuccessResponse({
      message: '分类已删除',
      category
    });
  }
);
